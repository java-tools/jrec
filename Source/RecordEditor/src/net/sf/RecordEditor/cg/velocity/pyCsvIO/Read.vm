import csv
#set ($schemaDef = ${generateOptions.schemaDefinition})
#set ($r = ${generateOptions.schemaDefinition.getRecords().get(0)})

#incl("pyCsvIO/CsvCommonPy.vm")

#indexClassPy()

def read_data(path):
#if (${generateOptions.schemaDefinition.areThereColumnNames()})
    with open(path, 'rb') as csvfile:
        csvReader = csv.reader(csvfile, delimiter='${generateOptions.schemaDefinition.getDelimiter()}'${q})
        next(csvReader)
#else
    with open('${generateOptions.getDataFileName().getEscapedFileName()}', 'rb') as csvfile:
        csvReader = csv.reader(csvfile, delimiter='${generateOptions.schemaDefinition.getDelimiter()}'${q})
#end
        for row in csvReader:
            yield row

# -------------------------------------------------------

if __name__ == "__main__":
    idx = indexs()
    
    for rowIndex, row in enumerate(read_data('${generateOptions.getDataFileName().getEscapedFileName()}')):
#*  *##if ( ${r.getFields().size()} == 0 )
        print row
#*  *##elseif ( ${r.getFields().size()} == 1 )
        print row[idx.${r.getFields().get(0).javaName}]
#*  *##elseif ( ${r.getFields().size()} == 2 )
        print row[idx.${r.getFields().get(0).javaName}], row[idx.${r.getFields().get(1).javaName}]
#*  *##else
        print row[idx.${r.getFields().get(0).javaName}], row[idx.${r.getFields().get(1).javaName}], row[idx.${r.getFields().get(2).javaName}]
#*  *##end
