/*
 * Generated by XmplLineBuilder from Velocity template LineProcess.vm
 *
 */
package $package;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.zip.GZIPInputStream;

import net.sf.RecordEditor.record.CopyBookDbReader;
import net.sf.RecordEditor.record.LayoutDetail;
import net.sf.RecordEditor.record.io.AbsLineReader;
import net.sf.RecordEditor.record.io.LineIOProvider;

/**
 * Generated by XmplLineBuilder from Velocity template LineProcess.vm
 *
 */
public class ${recName}Process $extendsValue {

    private int lineNumber;

    /**
     * process an input file
     *
     * @param fileName filename to process
     *
     * @throws IOException any IO error that occurs
     */
    public void process(String fileName)  throws IOException {
        process(fileName, getGroup());
    }


    /**
     * process an input file
     *
     * @param fileName filename to process
     * @param group record layout
     *
     * @throws IOException any IO error that occurs
     */
    public void process(String fileName, LayoutDetail group)  throws IOException {
        if (fileName.endsWith(".gz")) {
            FileInputStream rf = new FileInputStream(fileName);

            process(new GZIPInputStream(rf), group);

            rf.close();
        } else {
            process(new FileInputStream(fileName), group);
        }
    }

    /**
     * process an input stream
     *
     * @param file input stream process
     *
     * @throws IOException any IO error that occurs
     */
    public void process(InputStream file) throws IOException {
        process(file, getGroup());
    }


    /**
     * get Record Layout
     *
     * @return Record Layout
     */
    private LayoutDetail getGroup() {
        return new CopyBookDbReader().getLayout("$typeName");
    }


    /**
     * process an input stream
     *
     * @param file input stream process
     * @param group record layout
     *
     * @throws IOException any IO error that occurs
     */
    public void process(InputStream file, LayoutDetail group) throws IOException {
        int        preferedLayout;
        int         fileStructure = group.getFileStructure();
        LineIOProvider ioProvider = new LineIOProvider(new ${recName}Provider());
        AbsLineReader      reader = ioProvider.getLineReader(fileStructure);
        ${recName}           line;

        lineNumber = 0;
        reader.open(file, group);
        fileOpen();

        while ((line = (${recName}) reader.read()) != null) {
            preferedLayout = line.getPreferredLayoutIdx();
            lineNumber += 1;

#set ($ifStatment = "if")
#foreach( $rec in $records )
            $ifStatment (preferedLayout == ${recName}.get${rec.JavaName}Index()) {
                process${rec.JavaName}(line);
#set ($ifStatment = "} else if")
#end
            } else {
                unkownRecord(line);
            }
        }

        fileClosed();
        reader.close();
    }


    /**
     * Called after file is opened
     */
    public void fileOpen() { }


    /**
     * Called after file is opened
     */
    public void fileClosed() { }


    /**
     * Called after file is opened
     *
     * @param line Line to be processed
     */
    public void unkownRecord(${recName} line) { }

#foreach( $rec in $records )


    /**
     * process "$rec.Details.RecordName"
     * $rec.Details.Description
     *
     * @param line Line to be processed
     *
     * @throws IOException any IO error that occurs
     */
    public void process${rec.JavaName}(${recName} line)
    throws IOException { }
#end


    /**
     * @return Returns the lineNumber.
     */
    public int getLineNumber() {
        return lineNumber;
    }
}
