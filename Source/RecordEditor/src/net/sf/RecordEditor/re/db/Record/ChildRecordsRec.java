package net.sf.RecordEditor.re.db.Record;

import net.sf.RecordEditor.utils.jdbc.AbsRecord;

/**
 *   This class holds the fields extracted from a SQL statement:
 *
 *   <pre>
 *       Select
 *              Child_Record,
 *              FieldStart as Start,
 *              Field,
 *              Field_Value
 *       from Tbl_RS2_SubRecords
 *       where RecordId = ?
 *
 *   </pre>
 * This class also provides both specific field access methods
 * and Generic (based on Field number) access
 *
 * @Author Generated by BuildJava.Rexx by Bruce Martin
 *
 */
public class ChildRecordsRec extends AbsRecord {

	public final static int OP_OR_AND = 0; 
	private int childRecord;
	protected int initChildKey ;
	private int start;
	private String field;
	private String fieldValue;
	private int parentRecord;
	private int childKey, operatorSequence=0;
	private boolean defaultRecord;
	private String childName="";
	private int childId;



	public ChildRecordsRec () {
		super();

		childRecord = 0;
		start = 0;
		field = "";
		fieldValue = "";
		childRecord = -1;
		childKey = -1;
		defaultRecord = false;
		childId = -1;
		parentRecord = -1;
        
        setNew(true);

		setKeys();
	}

	public ChildRecordsRec (
			int pChildRecord
			, int pStart
			, String pField
			, String pFieldValue
			, int pParentRecord
			, int pChildKey
			, int pOperatorSequence
			, boolean defaultRec
			, String childName
			, int childId
			) {
		super(false);

		childRecord = pChildRecord;
		start = pStart;
		field = pField;
		fieldValue = pFieldValue;
		parentRecord = pParentRecord;
		childKey = pChildKey;
		operatorSequence = pOperatorSequence;
		defaultRecord = defaultRec;
		this.childName = childName;
		this.childId = childId;

		setKeys();
	}


	/**
	 *  This method copies the key fields to the Init* fields
	 */
	public void setKeys() {

		initChildKey = childKey;
	}



	/**
	 * @see net.sf.RecordEditor.utils.jdbc.AbsRecord#hasTheKeyChanged()
	 */
	@Override
	public boolean hasTheKeyChanged() {
		return initChildKey != childKey;
	}


	/**
	 *  This method returns clones the current record
	 *
	 *  @return a duplicate of the current record
	 */
	public Object clone() {

		super.clone();

		ChildRecordsRec ret = new ChildRecordsRec(
				childRecord
				, start
				, field
				, fieldValue
				, parentRecord
				, childKey
				, operatorSequence
				, defaultRecord
				, childName
				, -1
				);

		ret.setNew(true);

		return ret;
	}



	/**
	 *  This method returns clones the current record
	 */
	public int getFieldCount() {
		return 5;
	}




	/**
	 *  This method returns a field (specified by field number)
	 *
	 *  @param fieldNum the field number (in the record)
	 *  @return the request field
	 */
	public Object getField(int fieldNum) {

		if (updateStatus == NULL_INT_VALUE) return "";

		switch (fieldNum) {
		case (0) : return Integer.valueOf(childRecord);
		case (1) : return childName;
		case (2) : return field;
		case (3) : return fieldValue;
		case (4) : return Integer.valueOf(parentRecord);
		default  : return "";
		}
	}


	/**
	 *  This method sets a field (specified by field number) with a string value
	 *
	 *  @param fieldNum the field number (in the record)
	 *  @param val the value to be assigned to the field
	 */
	protected void setFieldWithString(int fieldNum, String val) {

		switch (fieldNum) {
		case (0) : setChildRecord(cnvToInt(childRecord, val, "Child Record" ));
		break;
		case (1) : setChildName(val);
		break;
		case (2) : setField(val);
		break;
		case (3) : setFieldValue(val);
		break;
		case (4) : setParentRecord(cnvToInt(parentRecord, val, "Parent Record" ));
		default  : ;
		}
	}


	/**
	 *  This method sets a field (specified by field number) with an object value
	 *
	 *  @param fieldNum the field number (in the record)
	 *  @param val the value to be assigned to the field
	 */
	protected void setFieldWithObject(int fieldNum, Object val) {

		switch (fieldNum) {
		case (0) : setChildRecord(((Integer) val).intValue());
		break;
		case (4) : setParentRecord(((Integer) val).intValue());
		break;
		default  : setFieldWithString(fieldNum, (String) val) ;
		}
	}

	/**
	 *  This method gets the vaule of ChildRecord
	 */
	public int getChildRecordId() {
		return childRecord;
	}

	/**
	 *  This method sets the vaule of ChildRecord
	 *
	 * @param val value to be assigned to ChildRecord
	 */
	public void setChildRecord(int val) {

		if ((val != childRecord) || (updateStatus == NULL_INT_VALUE)) {
			childRecord = val;
			updateStatus = UPDATED;
		}
	}

	/**
	 *  This method gets the vaule of Start
	 */
	public int getStart() {
		return start;
	}

	/**
	 *  This method sets the vaule of Start
	 *
	 * @param val value to be assigned to Start
	 */
	public void setStart(int val) {

		if ((val != start) || (updateStatus == NULL_INT_VALUE)) {
			start = val;
			updateStatus = UPDATED;
		}
	}

	/**
	 *  This method gets the vaule of Field
	 */
	public String getField() {
		return field;
	}

	/**
	 *  This method sets the vaule of Field
	 *
	 * @param val value to be assigned to Field
	 */
	public void setField(String val) {

		if ((val == null || "".equals(val))
				&& (field == null || "".equals(field))) {
			return;
		}

		if ((val == null) || (! val.equals(field)) || (updateStatus == NULL_INT_VALUE)) {
			field = val;
			updateStatus = UPDATED;
		}
	}

	/**
	 *  This method gets the vaule of FieldValue
	 */
	public String getFieldValue() {
		return fieldValue;
	}

	/**
	 *  This method sets the vaule of FieldValue
	 *
	 * @param val value to be assigned to FieldValue
	 */
	public void setFieldValue(String val) {

		if (! equals(fieldValue, val)) {
			fieldValue = val;
			updateStatus = UPDATED;
		}
	}

	/**
	 * @return the parentRecord
	 */
	public int getParentRecord() {
		return parentRecord;
	}

	/**
	 * @param parentRecord the parentRecord to set
	 */
	public void setParentRecord(int parentRecord) {

		if (this.parentRecord != parentRecord) {
			this.parentRecord = parentRecord;
			updateStatus = UPDATED;
		}
	}




	/**
	 * @return the childKey
	 */
	public int getChildKey() {
		return childKey;
	}




	/**
	 * @param childKey the childKey to set
	 */
	public void setChildKey(int childKey) {
		if (this.childKey != childKey) {
			this.childKey = childKey;
			updateStatus = UPDATED;
		}
	}




	/**
	 * @return the operatorSequence
	 */
	public int getOperatorSequence() {
		return operatorSequence;
	}


	/**
	 * @param operatorSequence the operatorSequence to set
	 */
	public void setOperatorSequence(int operatorSequence) {

		if (this.operatorSequence != operatorSequence) {
			this.operatorSequence = operatorSequence;
			updateStatus = UPDATED;
		}

	}


	public static ChildRecordsRec getBlankChildRec(int recordId) {
		return new ChildRecordsRec(recordId, 0, "", "", -1, 0, ChildRecordsRec.OP_OR_AND, false, "", -1);
	}

	/**
	 * @return the defaultRecord
	 */
	public boolean isDefaultRecord() {
		return defaultRecord;
	}

	/**
	 * @param defaultRecord the defaultRecord to set
	 */
	public void setDefaultRecord(boolean defaultRecord) {
		if (this.defaultRecord != defaultRecord) {
			this.defaultRecord = defaultRecord;
			updateStatus = UPDATED;
		}
	}

	/**
	 * @return the childName
	 */
	public String getChildName() {
		return childName;
	}

	/**
	 * @param childName the childName to set
	 */
	public void setChildName(String childName) {
		if (! equals(this.childName , childName)) {
			this.childName = childName;
		}
	}

	/**
	 * @return the childId
	 */
	public int getChildId() {
		return childId;
	}

	/**
	 * @param childId the childId to set
	 */
	public void setChildId(int childId) {
		if (this.childId != childId) {
			this.childId = childId;
			updateStatus = UPDATED;
		}
	}
}
