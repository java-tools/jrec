/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.sf.cb2xml.sablecc.lexer;

import java.io.*;
import java.util.*;
import net.sf.cb2xml.sablecc.node.*;

public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    protected void filter() throws LexerException, IOException
    {
    }

    public Lexer(PushbackReader in)
    {
        this.in = in;

        if(gotoTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Lexer.class.getResourceAsStream("lexer.dat")));

                // read gotoTable
                int length = s.readInt();
                gotoTable = new int[length][][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][][];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        length = s.readInt();
                        gotoTable[i][j] = new int[length][3];
                        for(int k = 0; k < gotoTable[i][j].length; k++)
                        {
                            for(int l = 0; l < 3; l++)
                            {
                                gotoTable[i][j][k][l] = s.readInt();
                            }
                        }
                    }
                }

                // read accept
                length = s.readInt();
                accept = new int[length][];
                for(int i = 0; i < accept.length; i++)
                {
                    length = s.readInt();
                    accept[i] = new int[length];
                    for(int j = 0; j < accept[i].length; j++)
                    {
                        accept[i][j] = s.readInt();
                    }
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
            }
        }
    }

    public Token peek() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        return token;
    }

    public Token next() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        Token result = token;
        token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = pos;
        int start_line = line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        int[][][] gotoTable = this.gotoTable[state.id()];
        int[] accept = this.accept[state.id()];
        text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(cr)
                    {
                        cr = false;
                    }
                    else
                    {
                        line++;
                        pos = 0;
                    }
                    break;
                case 13:
                    line++;
                    pos = 0;
                    cr = true;
                    break;
                default:
                    pos++;
                    cr = false;
                    break;
                };

                text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = text.length();
                    accept_pos = pos;
                    accept_line = line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            Token token = new1(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            Token token = new11(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            Token token = new12(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            Token token = new13(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            Token token = new14(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            Token token = new15(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            Token token = new16(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            Token token = new17(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            Token token = new18(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            Token token = new19(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            Token token = new20(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            Token token = new21(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            Token token = new22(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            Token token = new23(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            Token token = new24(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            Token token = new25(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            Token token = new26(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            Token token = new27(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            Token token = new28(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                            Token token = new29(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            Token token = new30(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                            Token token = new31(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 32:
                        {
                            Token token = new32(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 33:
                        {
                            Token token = new33(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 34:
                        {
                            Token token = new34(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 35:
                        {
                            Token token = new35(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 36:
                        {
                            Token token = new36(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 37:
                        {
                            Token token = new37(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 38:
                        {
                            Token token = new38(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 39:
                        {
                            Token token = new39(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 40:
                        {
                            Token token = new40(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 41:
                        {
                            Token token = new41(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 42:
                        {
                            Token token = new42(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 43:
                        {
                            Token token = new43(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 44:
                        {
                            Token token = new44(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 45:
                        {
                            Token token = new45(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 46:
                        {
                            Token token = new46(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 47:
                        {
                            Token token = new47(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 48:
                        {
                            Token token = new48(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 49:
                        {
                            Token token = new49(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 50:
                        {
                            Token token = new50(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 51:
                        {
                            Token token = new51(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 52:
                        {
                            Token token = new52(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 53:
                        {
                            Token token = new53(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 54:
                        {
                            Token token = new54(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 55:
                        {
                            Token token = new55(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 56:
                        {
                            Token token = new56(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 57:
                        {
                            Token token = new57(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 58:
                        {
                            Token token = new58(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 59:
                        {
                            Token token = new59(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 60:
                        {
                            Token token = new60(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 61:
                        {
                            Token token = new61(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 62:
                        {
                            Token token = new62(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 63:
                        {
                            Token token = new63(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 64:
                        {
                            Token token = new64(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 65:
                        {
                            Token token = new65(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 66:
                        {
                            Token token = new66(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 67:
                        {
                            Token token = new67(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 68:
                        {
                            Token token = new68(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 69:
                        {
                            Token token = new69(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 70:
                        {
                            Token token = new70(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 71:
                        {
                            Token token = new71(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 72:
                        {
                            Token token = new72(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 73:
                        {
                            Token token = new73(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 74:
                        {
                            Token token = new74(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 75:
                        {
                            Token token = new75(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 76:
                        {
                            Token token = new76(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 77:
                        {
                            Token token = new77(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 78:
                        {
                            Token token = new78(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 79:
                        {
                            Token token = new79(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 80:
                        {
                            Token token = new80(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + text);
                    }
                    else
                    {
                        EOF token = new EOF(
                            start_line + 1,
                            start_pos + 1);
                        return token;
                    }
                }
            }
        }
    }

    Token new0(String text, int line, int pos) { return new TWhiteSpace(text, line, pos); }
    Token new1(String text, int line, int pos) { return new TComment(text, line, pos); }
    Token new2(int line, int pos) { return new TDot(line, pos); }
    Token new3(int line, int pos) { return new TComma(line, pos); }
    Token new4(int line, int pos) { return new TSlash(line, pos); }
    Token new5(int line, int pos) { return new TPlus(line, pos); }
    Token new6(int line, int pos) { return new TMinus(line, pos); }
    Token new7(int line, int pos) { return new TStar(line, pos); }
    Token new8(int line, int pos) { return new TDollar(line, pos); }
    Token new9(int line, int pos) { return new TLparen(line, pos); }
    Token new10(int line, int pos) { return new TRparen(line, pos); }
    Token new11(String text, int line, int pos) { return new TNumber88(text, line, pos); }
    Token new12(String text, int line, int pos) { return new TNumberNot88(text, line, pos); }
    Token new13(String text, int line, int pos) { return new TAlphanumericLiteral(text, line, pos); }
    Token new14(String text, int line, int pos) { return new TNumericLiteral(text, line, pos); }
    Token new15(String text, int line, int pos) { return new TDotZee(text, line, pos); }
    Token new16(String text, int line, int pos) { return new TDotMinus(text, line, pos); }
    Token new17(String text, int line, int pos) { return new TDotPlus(text, line, pos); }
    Token new18(String text, int line, int pos) { return new TAll(text, line, pos); }
    Token new19(String text, int line, int pos) { return new TAre(text, line, pos); }
    Token new20(String text, int line, int pos) { return new TAscending(text, line, pos); }
    Token new21(String text, int line, int pos) { return new TBinary(text, line, pos); }
    Token new22(String text, int line, int pos) { return new TBlank(text, line, pos); }
    Token new23(String text, int line, int pos) { return new TBy(text, line, pos); }
    Token new24(String text, int line, int pos) { return new TCharacter(text, line, pos); }
    Token new25(String text, int line, int pos) { return new TComp(text, line, pos); }
    Token new26(String text, int line, int pos) { return new TComp1(text, line, pos); }
    Token new27(String text, int line, int pos) { return new TComp2(text, line, pos); }
    Token new28(String text, int line, int pos) { return new TComp3(text, line, pos); }
    Token new29(String text, int line, int pos) { return new TComp4(text, line, pos); }
    Token new30(String text, int line, int pos) { return new TComp5(text, line, pos); }
    Token new31(String text, int line, int pos) { return new TComp6(text, line, pos); }
    Token new32(String text, int line, int pos) { return new TDate(text, line, pos); }
    Token new33(String text, int line, int pos) { return new TDepending(text, line, pos); }
    Token new34(String text, int line, int pos) { return new TDescending(text, line, pos); }
    Token new35(String text, int line, int pos) { return new TDisplay(text, line, pos); }
    Token new36(String text, int line, int pos) { return new TDisplay1(text, line, pos); }
    Token new37(String text, int line, int pos) { return new TExternal(text, line, pos); }
    Token new38(String text, int line, int pos) { return new TFiller(text, line, pos); }
    Token new39(String text, int line, int pos) { return new TFormat(text, line, pos); }
    Token new40(String text, int line, int pos) { return new TFunctionPointer(text, line, pos); }
    Token new41(String text, int line, int pos) { return new TGlobal(text, line, pos); }
    Token new42(String text, int line, int pos) { return new THighValues(text, line, pos); }
    Token new43(String text, int line, int pos) { return new TIndex(text, line, pos); }
    Token new44(String text, int line, int pos) { return new TIndexed(text, line, pos); }
    Token new45(String text, int line, int pos) { return new TIs(text, line, pos); }
    Token new46(String text, int line, int pos) { return new TJustified(text, line, pos); }
    Token new47(String text, int line, int pos) { return new TKey(text, line, pos); }
    Token new48(String text, int line, int pos) { return new TLeading(text, line, pos); }
    Token new49(String text, int line, int pos) { return new TLeft(text, line, pos); }
    Token new50(String text, int line, int pos) { return new TLowValues(text, line, pos); }
    Token new51(String text, int line, int pos) { return new TNational(text, line, pos); }
    Token new52(String text, int line, int pos) { return new TNative(text, line, pos); }
    Token new53(String text, int line, int pos) { return new TNulls(text, line, pos); }
    Token new54(String text, int line, int pos) { return new TObject(text, line, pos); }
    Token new55(String text, int line, int pos) { return new TOccurs(text, line, pos); }
    Token new56(String text, int line, int pos) { return new TOn(text, line, pos); }
    Token new57(String text, int line, int pos) { return new TPackedDecimal(text, line, pos); }
    Token new58(String text, int line, int pos) { return new TPicture(text, line, pos); }
    Token new59(String text, int line, int pos) { return new TPointer(text, line, pos); }
    Token new60(String text, int line, int pos) { return new TProcedurePointer(text, line, pos); }
    Token new61(String text, int line, int pos) { return new TQuotes(text, line, pos); }
    Token new62(String text, int line, int pos) { return new TRedefines(text, line, pos); }
    Token new63(String text, int line, int pos) { return new TReference(text, line, pos); }
    Token new64(String text, int line, int pos) { return new TRenames(text, line, pos); }
    Token new65(String text, int line, int pos) { return new TRight(text, line, pos); }
    Token new66(String text, int line, int pos) { return new TSeparate(text, line, pos); }
    Token new67(String text, int line, int pos) { return new TSign(text, line, pos); }
    Token new68(String text, int line, int pos) { return new TSpaces(text, line, pos); }
    Token new69(String text, int line, int pos) { return new TSynchronized(text, line, pos); }
    Token new70(String text, int line, int pos) { return new TThrough(text, line, pos); }
    Token new71(String text, int line, int pos) { return new TTimes(text, line, pos); }
    Token new72(String text, int line, int pos) { return new TTo(text, line, pos); }
    Token new73(String text, int line, int pos) { return new TTrailing(text, line, pos); }
    Token new74(String text, int line, int pos) { return new TUsage(text, line, pos); }
    Token new75(String text, int line, int pos) { return new TValue(text, line, pos); }
    Token new76(String text, int line, int pos) { return new TValues(text, line, pos); }
    Token new77(String text, int line, int pos) { return new TWhen(text, line, pos); }
    Token new78(String text, int line, int pos) { return new TZeros(text, line, pos); }
    Token new79(String text, int line, int pos) { return new TDataName(text, line, pos); }
    Token new80(String text, int line, int pos) { return new TUnknown(text, line, pos); }

    private int getChar() throws IOException
    {
        if(eof)
        {
            return -1;
        }

        int result = in.read();

        if(result == -1)
        {
            eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }
    }

    protected void unread(Token token) throws IOException
    {
        String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }

        pos = token.getPos() - 1;
        line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 12, 1}, {13, 13, 4}, {14, 31, 1}, {32, 32, 5}, {33, 33, 1}, {34, 34, 6}, {35, 35, 1}, {36, 36, 7}, {37, 38, 1}, {39, 39, 8}, {40, 40, 9}, {41, 41, 10}, {42, 42, 11}, {43, 43, 12}, {44, 44, 13}, {45, 45, 14}, {46, 46, 15}, {47, 47, 16}, {48, 55, 17}, {56, 56, 18}, {57, 57, 17}, {58, 64, 1}, {65, 65, 19}, {66, 66, 20}, {67, 67, 21}, {68, 68, 22}, {69, 69, 23}, {70, 70, 24}, {71, 71, 25}, {72, 72, 26}, {73, 73, 27}, {74, 74, 28}, {75, 75, 29}, {76, 76, 30}, {77, 77, 31}, {78, 78, 32}, {79, 79, 33}, {80, 80, 34}, {81, 81, 35}, {82, 82, 36}, {83, 83, 37}, {84, 84, 38}, {85, 85, 39}, {86, 86, 40}, {87, 87, 41}, {88, 88, 42}, {89, 89, 31}, {90, 90, 43}, {91, 96, 1}, {97, 97, 44}, {98, 98, 45}, {99, 99, 46}, {100, 100, 47}, {101, 101, 48}, {102, 102, 49}, {103, 103, 50}, {104, 104, 51}, {105, 105, 52}, {106, 106, 53}, {107, 107, 54}, {108, 108, 55}, {109, 109, 56}, {110, 110, 57}, {111, 111, 58}, {112, 112, 59}, {113, 113, 60}, {114, 114, 61}, {115, 115, 62}, {116, 116, 63}, {117, 117, 64}, {118, 118, 65}, {119, 119, 66}, {120, 121, 56}, {122, 122, 67}, {123, 65535, 1}, },
            {},
            {{9, 9, 68}, {10, 10, 69}, {13, 13, 70}, {32, 32, 71}, },
            {{9, 32, -4}, },
            {{9, 9, 68}, {10, 10, 72}, {13, 32, -4}, },
            {{9, 32, -4}, },
            {{0, 33, 73}, {34, 34, 74}, {35, 65535, 73}, },
            {},
            {{0, 38, 75}, {39, 39, 76}, {40, 65535, 75}, },
            {},
            {},
            {{0, 9, 77}, {10, 10, 78}, {11, 12, 77}, {13, 13, 79}, {14, 65535, 77}, },
            {{46, 46, 80}, {48, 57, 81}, },
            {},
            {{46, 57, -14}, },
            {{45, 45, 82}, {48, 57, 83}, {90, 90, 84}, },
            {},
            {{46, 46, 80}, {48, 57, 85}, {65, 90, 86}, {97, 122, 87}, },
            {{46, 46, 80}, {48, 55, 85}, {56, 56, 88}, {57, 57, 85}, {65, 122, -19}, },
            {{45, 45, 89}, {48, 57, 90}, {65, 75, 91}, {76, 76, 92}, {77, 81, 91}, {82, 82, 93}, {83, 83, 94}, {84, 90, 91}, {97, 107, 95}, {108, 108, 96}, {109, 113, 95}, {114, 114, 97}, {115, 115, 98}, {116, 122, 95}, },
            {{45, 57, -21}, {65, 72, 91}, {73, 73, 99}, {74, 75, 91}, {76, 76, 100}, {77, 88, 91}, {89, 89, 101}, {90, 90, 91}, {97, 104, 95}, {105, 105, 102}, {106, 107, 95}, {108, 108, 103}, {109, 120, 95}, {121, 121, 104}, {122, 122, 95}, },
            {{45, 57, -21}, {65, 71, 91}, {72, 72, 105}, {73, 78, 91}, {79, 79, 106}, {80, 90, 91}, {97, 103, 95}, {104, 104, 107}, {105, 110, 95}, {111, 111, 108}, {112, 122, 95}, },
            {{45, 57, -21}, {65, 65, 109}, {66, 68, 91}, {69, 69, 110}, {70, 72, 91}, {73, 73, 111}, {74, 90, 91}, {97, 97, 112}, {98, 100, 95}, {101, 101, 113}, {102, 104, 95}, {105, 105, 114}, {106, 122, 95}, },
            {{45, 57, -21}, {65, 87, 91}, {88, 88, 115}, {89, 90, 91}, {97, 119, 95}, {120, 120, 116}, {121, 122, 95}, },
            {{45, 72, -22}, {73, 73, 117}, {74, 78, 91}, {79, 79, 118}, {80, 84, 91}, {85, 85, 119}, {86, 90, 91}, {97, 104, 95}, {105, 105, 120}, {106, 110, 95}, {111, 111, 121}, {112, 116, 95}, {117, 117, 122}, {118, 122, 95}, },
            {{45, 75, -21}, {76, 76, 123}, {77, 90, 91}, {97, 107, 95}, {108, 108, 124}, {109, 122, 95}, },
            {{45, 72, -22}, {73, 73, 125}, {74, 90, 91}, {97, 104, 95}, {105, 105, 126}, {106, 122, 95}, },
            {{45, 57, -21}, {65, 77, 91}, {78, 78, 127}, {79, 82, 91}, {83, 83, 128}, {84, 90, 91}, {97, 109, 95}, {110, 110, 129}, {111, 114, 95}, {115, 115, 130}, {116, 122, 95}, },
            {{45, 57, -21}, {65, 84, 91}, {85, 85, 131}, {86, 90, 91}, {97, 116, 95}, {117, 117, 132}, {118, 122, 95}, },
            {{45, 57, -21}, {65, 68, 91}, {69, 69, 133}, {70, 90, 91}, {97, 100, 95}, {101, 101, 134}, {102, 122, 95}, },
            {{45, 68, -31}, {69, 69, 135}, {70, 78, 91}, {79, 79, 136}, {80, 90, 91}, {97, 100, 95}, {101, 101, 137}, {102, 110, 95}, {111, 111, 138}, {112, 122, 95}, },
            {{45, 57, -21}, {65, 90, 91}, {97, 122, 95}, },
            {{45, 57, -21}, {65, 65, 139}, {66, 84, 91}, {85, 85, 140}, {86, 90, 91}, {97, 97, 141}, {98, 116, 95}, {117, 117, 142}, {118, 122, 95}, },
            {{45, 57, -21}, {65, 65, 91}, {66, 66, 143}, {67, 67, 144}, {68, 77, 91}, {78, 78, 145}, {79, 90, 91}, {97, 97, 95}, {98, 98, 146}, {99, 99, 147}, {100, 109, 95}, {110, 110, 148}, {111, 122, 95}, },
            {{45, 57, -21}, {65, 65, 149}, {66, 72, 91}, {73, 73, 150}, {74, 78, 91}, {79, 79, 151}, {80, 81, 91}, {82, 82, 152}, {83, 90, 91}, {97, 97, 153}, {98, 104, 95}, {105, 105, 154}, {106, 110, 95}, {111, 111, 155}, {112, 113, 95}, {114, 114, 156}, {115, 122, 95}, },
            {{45, 84, -30}, {85, 85, 157}, {86, 116, -30}, {117, 117, 158}, {118, 122, 95}, },
            {{45, 68, -31}, {69, 69, 159}, {70, 72, 91}, {73, 73, 160}, {74, 90, 91}, {97, 100, 95}, {101, 101, 161}, {102, 104, 95}, {105, 105, 162}, {106, 122, 95}, },
            {{45, 68, -31}, {69, 69, 163}, {70, 72, 91}, {73, 73, 164}, {74, 79, 91}, {80, 80, 165}, {81, 88, 91}, {89, 89, 166}, {90, 90, 91}, {97, 100, 95}, {101, 101, 167}, {102, 104, 95}, {105, 105, 168}, {106, 111, 95}, {112, 112, 169}, {113, 120, 95}, {121, 121, 170}, {122, 122, 95}, },
            {{45, 71, -23}, {72, 72, 171}, {73, 73, 172}, {74, 78, 91}, {79, 79, 173}, {80, 81, 91}, {82, 82, 174}, {83, 90, 91}, {97, 103, 95}, {104, 104, 175}, {105, 105, 176}, {106, 110, 95}, {111, 111, 177}, {112, 113, 95}, {114, 114, 178}, {115, 122, 95}, },
            {{45, 57, -21}, {65, 82, 91}, {83, 83, 179}, {84, 90, 91}, {97, 114, 95}, {115, 115, 180}, {116, 122, 95}, },
            {{45, 57, -21}, {65, 65, 181}, {66, 90, 91}, {97, 97, 182}, {98, 122, 95}, },
            {{45, 71, -23}, {72, 72, 183}, {73, 90, 91}, {97, 103, 95}, {104, 104, 184}, {105, 122, 95}, },
            {{34, 34, 185}, {39, 39, 186}, {45, 122, -33}, },
            {{45, 68, -31}, {69, 69, 187}, {70, 100, -31}, {101, 101, 188}, {102, 122, 95}, },
            {{45, 122, -21}, },
            {{45, 122, -22}, },
            {{45, 122, -23}, },
            {{45, 122, -24}, },
            {{45, 122, -25}, },
            {{45, 122, -26}, },
            {{45, 122, -27}, },
            {{45, 122, -28}, },
            {{45, 122, -29}, },
            {{45, 122, -30}, },
            {{45, 122, -31}, },
            {{45, 122, -32}, },
            {{45, 122, -33}, },
            {{45, 122, -34}, },
            {{45, 122, -35}, },
            {{45, 122, -36}, },
            {{45, 122, -37}, },
            {{45, 122, -38}, },
            {{45, 122, -39}, },
            {{45, 122, -40}, },
            {{45, 122, -41}, },
            {{45, 122, -42}, },
            {{45, 122, -43}, },
            {{45, 122, -45}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -6}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{0, 65535, -8}, },
            {{34, 34, 189}, },
            {{0, 65535, -10}, },
            {{39, 39, 190}, },
            {{0, 65535, -13}, },
            {},
            {{10, 10, 191}, },
            {{48, 57, 83}, },
            {{46, 57, -14}, },
            {{45, 45, 82}, },
            {{48, 57, 83}, {69, 69, 192}, },
            {{90, 90, 84}, },
            {{46, 122, -19}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{46, 122, -19}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 75, -21}, {76, 76, 193}, {77, 107, -27}, {108, 108, 194}, {109, 122, 95}, },
            {{45, 68, -31}, {69, 69, 195}, {70, 100, -31}, {101, 101, 196}, {102, 122, 95}, },
            {{45, 57, -21}, {65, 66, 91}, {67, 67, 197}, {68, 90, 91}, {97, 98, 95}, {99, 99, 198}, {100, 122, 95}, },
            {{45, 122, -33}, },
            {{45, 122, -94}, },
            {{45, 122, -95}, },
            {{45, 122, -96}, },
            {{45, 77, -29}, {78, 78, 199}, {79, 90, 91}, {97, 109, 95}, {110, 110, 200}, {111, 122, 95}, },
            {{45, 57, -21}, {65, 65, 201}, {66, 90, 91}, {97, 97, 202}, {98, 122, 95}, },
            {{45, 122, -33}, },
            {{45, 122, -101}, },
            {{45, 122, -102}, },
            {{45, 122, -33}, },
            {{45, 57, -21}, {65, 65, 203}, {66, 90, 91}, {97, 97, 204}, {98, 122, 95}, },
            {{45, 57, -21}, {65, 76, 91}, {77, 77, 205}, {78, 90, 91}, {97, 108, 95}, {109, 109, 206}, {110, 122, 95}, },
            {{45, 122, -107}, },
            {{45, 122, -108}, },
            {{45, 57, -21}, {65, 83, 91}, {84, 84, 207}, {85, 90, 91}, {97, 115, 95}, {116, 116, 208}, {117, 122, 95}, },
            {{45, 57, -21}, {65, 79, 91}, {80, 80, 209}, {81, 82, 91}, {83, 83, 210}, {84, 90, 91}, {97, 111, 95}, {112, 112, 211}, {113, 114, 95}, {115, 115, 212}, {116, 122, 95}, },
            {{45, 82, -41}, {83, 83, 213}, {84, 114, -41}, {115, 115, 214}, {116, 122, 95}, },
            {{45, 122, -111}, },
            {{45, 122, -112}, },
            {{45, 122, -113}, },
            {{45, 83, -111}, {84, 84, 215}, {85, 115, -111}, {116, 116, 216}, {117, 122, 95}, },
            {{45, 122, -117}, },
            {{45, 75, -21}, {76, 76, 217}, {77, 107, -27}, {108, 108, 218}, {109, 122, 95}, },
            {{45, 57, -21}, {65, 81, 91}, {82, 82, 219}, {83, 90, 91}, {97, 113, 95}, {114, 114, 220}, {115, 122, 95}, },
            {{45, 77, -29}, {78, 78, 221}, {79, 109, -101}, {110, 110, 222}, {111, 122, 95}, },
            {{45, 122, -119}, },
            {{45, 122, -120}, },
            {{45, 122, -121}, },
            {{45, 57, -21}, {65, 78, 91}, {79, 79, 223}, {80, 90, 91}, {97, 110, 95}, {111, 111, 224}, {112, 122, 95}, },
            {{45, 122, -125}, },
            {{45, 57, -21}, {65, 70, 91}, {71, 71, 225}, {72, 90, 91}, {97, 102, 95}, {103, 103, 226}, {104, 122, 95}, },
            {{45, 122, -127}, },
            {{45, 57, -21}, {65, 67, 91}, {68, 68, 227}, {69, 90, 91}, {97, 99, 95}, {100, 100, 228}, {101, 122, 95}, },
            {{45, 122, -33}, },
            {{45, 122, -129}, },
            {{45, 122, -33}, },
            {{45, 82, -41}, {83, 83, 229}, {84, 114, -41}, {115, 115, 230}, {116, 122, 95}, },
            {{45, 122, -133}, },
            {{45, 57, -21}, {65, 88, 91}, {89, 89, 231}, {90, 90, 91}, {97, 120, 95}, {121, 121, 232}, {122, 122, 95}, },
            {{45, 122, -135}, },
            {{45, 57, -21}, {65, 65, 233}, {66, 69, 91}, {70, 70, 234}, {71, 90, 91}, {97, 97, 235}, {98, 101, 95}, {102, 102, 236}, {103, 122, 95}, },
            {{45, 57, -21}, {65, 86, 91}, {87, 87, 237}, {88, 90, 91}, {97, 118, 95}, {119, 119, 238}, {120, 122, 95}, },
            {{45, 122, -137}, },
            {{45, 122, -138}, },
            {{45, 83, -111}, {84, 84, 239}, {85, 115, -111}, {116, 116, 240}, {117, 122, 95}, },
            {{45, 75, -21}, {76, 76, 241}, {77, 107, -27}, {108, 108, 242}, {109, 122, 95}, },
            {{45, 122, -141}, },
            {{45, 122, -142}, },
            {{45, 57, -21}, {65, 73, 91}, {74, 74, 243}, {75, 90, 91}, {97, 105, 95}, {106, 106, 244}, {107, 122, 95}, },
            {{45, 66, -96}, {67, 67, 245}, {68, 98, -96}, {99, 99, 246}, {100, 122, 95}, },
            {{45, 122, -33}, },
            {{45, 122, -145}, },
            {{45, 122, -146}, },
            {{45, 122, -33}, },
            {{45, 66, -96}, {67, 67, 247}, {68, 98, -96}, {99, 99, 248}, {100, 122, 95}, },
            {{45, 66, -96}, {67, 67, 249}, {68, 98, -96}, {99, 99, 250}, {100, 122, 95}, },
            {{45, 72, -22}, {73, 73, 251}, {74, 104, -28}, {105, 105, 252}, {106, 122, 95}, },
            {{45, 78, -125}, {79, 79, 253}, {80, 110, -125}, {111, 111, 254}, {112, 122, 95}, },
            {{45, 122, -151}, },
            {{45, 122, -152}, },
            {{45, 122, -153}, },
            {{45, 122, -154}, },
            {{45, 78, -125}, {79, 79, 255}, {80, 110, -125}, {111, 111, 256}, {112, 122, 95}, },
            {{45, 122, -159}, },
            {{45, 67, -129}, {68, 68, 257}, {69, 69, 91}, {70, 70, 258}, {71, 77, 91}, {78, 78, 259}, {79, 90, 91}, {97, 99, 95}, {100, 100, 260}, {101, 101, 95}, {102, 102, 261}, {103, 109, 95}, {110, 110, 262}, {111, 122, 95}, },
            {{45, 70, -127}, {71, 71, 263}, {72, 102, -127}, {103, 103, 264}, {104, 122, 95}, },
            {{45, 122, -161}, },
            {{45, 122, -162}, },
            {{45, 79, -112}, {80, 80, 265}, {81, 90, 91}, {97, 111, 95}, {112, 112, 266}, {113, 122, 95}, },
            {{45, 70, -127}, {71, 71, 267}, {72, 102, -127}, {103, 103, 268}, {104, 122, 95}, },
            {{45, 57, -21}, {65, 65, 269}, {66, 90, 91}, {97, 97, 270}, {98, 122, 95}, },
            {{45, 77, -29}, {78, 78, 271}, {79, 109, -101}, {110, 110, 272}, {111, 122, 95}, },
            {{45, 122, -165}, },
            {{45, 122, -166}, },
            {{45, 122, -167}, },
            {{45, 122, -168}, },
            {{45, 81, -120}, {82, 82, 273}, {83, 113, -120}, {114, 114, 274}, {115, 122, 95}, },
            {{45, 76, -108}, {77, 77, 275}, {78, 108, -108}, {109, 109, 276}, {110, 122, 95}, },
            {{45, 122, -33}, },
            {{45, 57, -21}, {65, 65, 277}, {66, 90, 91}, {97, 97, 278}, {98, 122, 95}, },
            {{45, 122, -173}, },
            {{45, 122, -174}, },
            {{45, 122, -33}, },
            {{45, 122, -176}, },
            {{45, 57, -21}, {65, 65, 279}, {66, 90, 91}, {97, 97, 280}, {98, 122, 95}, },
            {{45, 122, -181}, },
            {{45, 75, -21}, {76, 76, 281}, {77, 107, -27}, {108, 108, 282}, {109, 122, 95}, },
            {{45, 122, -183}, },
            {{45, 68, -31}, {69, 69, 283}, {70, 100, -31}, {101, 101, 284}, {102, 122, 95}, },
            {{45, 122, -185}, },
            {{48, 57, 285}, {65, 70, 286}, {97, 102, 287}, },
            {{48, 57, 288}, {65, 70, 289}, {97, 102, 290}, },
            {{45, 81, -120}, {82, 82, 291}, {83, 113, -120}, {114, 114, 292}, {115, 122, 95}, },
            {{45, 122, -189}, },
            {{0, 65535, -8}, },
            {{0, 65535, -10}, },
            {},
            {{43, 43, 293}, {45, 45, 294}, {48, 57, 295}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 68, -31}, {69, 69, 296}, {70, 100, -31}, {101, 101, 297}, {102, 122, 95}, },
            {{45, 122, -199}, },
            {{45, 57, -21}, {65, 65, 298}, {66, 90, 91}, {97, 97, 299}, {98, 122, 95}, },
            {{45, 122, -201}, },
            {{45, 77, -29}, {78, 78, 300}, {79, 109, -101}, {110, 110, 301}, {111, 122, 95}, },
            {{45, 122, -203}, },
            {{45, 81, -120}, {82, 82, 302}, {83, 113, -120}, {114, 114, 303}, {115, 122, 95}, },
            {{45, 122, -205}, },
            {{45, 79, -112}, {80, 80, 304}, {81, 111, -165}, {112, 112, 305}, {113, 122, 95}, },
            {{45, 122, -207}, },
            {{45, 68, -31}, {69, 69, 306}, {70, 100, -31}, {101, 101, 307}, {102, 122, 95}, },
            {{45, 122, -209}, },
            {{45, 68, -31}, {69, 69, 308}, {70, 100, -31}, {101, 101, 309}, {102, 122, 95}, },
            {{45, 66, -96}, {67, 67, 310}, {68, 98, -96}, {99, 99, 311}, {100, 122, 95}, },
            {{45, 122, -211}, },
            {{45, 122, -212}, },
            {{45, 79, -112}, {80, 80, 312}, {81, 111, -165}, {112, 112, 313}, {113, 122, 95}, },
            {{45, 122, -215}, },
            {{45, 68, -31}, {69, 69, 314}, {70, 100, -31}, {101, 101, 315}, {102, 122, 95}, },
            {{45, 122, -217}, },
            {{45, 75, -21}, {76, 76, 316}, {77, 107, -27}, {108, 108, 317}, {109, 122, 95}, },
            {{45, 122, -219}, },
            {{45, 76, -108}, {77, 77, 318}, {78, 108, -108}, {109, 109, 319}, {110, 122, 95}, },
            {{45, 122, -221}, },
            {{45, 66, -96}, {67, 67, 320}, {68, 98, -96}, {99, 99, 321}, {100, 122, 95}, },
            {{45, 122, -223}, },
            {{45, 65, -35}, {66, 66, 322}, {67, 90, 91}, {97, 97, 95}, {98, 98, 323}, {99, 122, 95}, },
            {{45, 122, -225}, },
            {{45, 71, -23}, {72, 72, 324}, {73, 103, -43}, {104, 104, 325}, {105, 122, 95}, },
            {{45, 122, -227}, },
            {{45, 68, -31}, {69, 69, 326}, {70, 100, -31}, {101, 101, 327}, {102, 122, 95}, },
            {{45, 122, -229}, },
            {{45, 83, -111}, {84, 84, 328}, {85, 115, -111}, {116, 116, 329}, {117, 122, 95}, },
            {{45, 122, -231}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 67, -129}, {68, 68, 330}, {69, 99, -129}, {100, 100, 331}, {101, 122, 95}, },
            {{45, 83, -111}, {84, 84, 332}, {85, 115, -111}, {116, 116, 333}, {117, 122, 95}, },
            {{45, 122, -235}, },
            {{45, 122, -236}, },
            {{45, 45, 334}, {48, 122, -33}, },
            {{45, 122, -239}, },
            {{45, 72, -22}, {73, 73, 335}, {74, 104, -28}, {105, 105, 336}, {106, 122, 95}, },
            {{45, 122, -241}, },
            {{45, 75, -21}, {76, 76, 337}, {77, 107, -27}, {108, 108, 338}, {109, 122, 95}, },
            {{45, 122, -243}, },
            {{45, 68, -31}, {69, 69, 339}, {70, 100, -31}, {101, 101, 340}, {102, 122, 95}, },
            {{45, 122, -245}, },
            {{45, 84, -30}, {85, 85, 341}, {86, 116, -30}, {117, 117, 342}, {118, 122, 95}, },
            {{45, 122, -247}, },
            {{45, 57, -21}, {65, 74, 91}, {75, 75, 343}, {76, 90, 91}, {97, 106, 95}, {107, 107, 344}, {108, 122, 95}, },
            {{45, 122, -249}, },
            {{45, 83, -111}, {84, 84, 345}, {85, 115, -111}, {116, 116, 346}, {117, 122, 95}, },
            {{45, 122, -251}, },
            {{45, 77, -29}, {78, 78, 347}, {79, 109, -101}, {110, 110, 348}, {111, 122, 95}, },
            {{45, 122, -253}, },
            {{45, 66, -96}, {67, 67, 349}, {68, 98, -96}, {99, 99, 350}, {100, 122, 95}, },
            {{45, 122, -255}, },
            {{45, 83, -111}, {84, 84, 351}, {85, 115, -111}, {116, 116, 352}, {117, 122, 95}, },
            {{45, 122, -257}, },
            {{45, 68, -31}, {69, 69, 353}, {70, 100, -31}, {101, 101, 354}, {102, 122, 95}, },
            {{45, 68, -31}, {69, 69, 355}, {70, 100, -31}, {101, 101, 356}, {102, 122, 95}, },
            {{45, 57, -21}, {65, 65, 357}, {66, 90, 91}, {97, 97, 358}, {98, 122, 95}, },
            {{45, 122, -259}, },
            {{45, 122, -260}, },
            {{45, 122, -261}, },
            {{45, 71, -23}, {72, 72, 359}, {73, 103, -43}, {104, 104, 360}, {105, 122, 95}, },
            {{45, 122, -265}, },
            {{45, 57, -21}, {65, 65, 361}, {66, 90, 91}, {97, 97, 362}, {98, 122, 95}, },
            {{45, 122, -267}, },
            {{45, 77, -29}, {78, 78, 363}, {79, 109, -101}, {110, 110, 364}, {111, 122, 95}, },
            {{45, 122, -269}, },
            {{45, 66, -96}, {67, 67, 365}, {68, 98, -96}, {99, 99, 366}, {100, 122, 95}, },
            {{45, 122, -271}, },
            {{45, 66, -96}, {67, 67, 367}, {68, 98, -96}, {99, 99, 368}, {100, 122, 95}, },
            {{45, 122, -273}, },
            {{45, 78, -125}, {79, 79, 369}, {80, 84, 91}, {85, 85, 370}, {86, 90, 91}, {97, 110, 95}, {111, 111, 371}, {112, 116, 95}, {117, 117, 372}, {118, 122, 95}, },
            {{45, 122, -275}, },
            {{45, 68, -31}, {69, 69, 373}, {70, 100, -31}, {101, 101, 374}, {102, 122, 95}, },
            {{45, 122, -277}, },
            {{45, 72, -22}, {73, 73, 375}, {74, 104, -28}, {105, 105, 376}, {106, 122, 95}, },
            {{45, 122, -279}, },
            {{45, 70, -127}, {71, 71, 377}, {72, 102, -127}, {103, 103, 378}, {104, 122, 95}, },
            {{45, 122, -281}, },
            {{45, 84, -30}, {85, 85, 379}, {86, 116, -30}, {117, 117, 380}, {118, 122, 95}, },
            {{45, 122, -283}, },
            {{45, 77, -29}, {78, 78, 381}, {79, 109, -101}, {110, 110, 382}, {111, 122, 95}, },
            {{45, 122, -285}, },
            {{48, 57, 383}, {65, 70, 384}, {97, 102, 385}, },
            {{48, 102, -287}, },
            {{48, 102, -287}, },
            {{48, 57, 386}, {65, 70, 387}, {97, 102, 388}, },
            {{48, 102, -290}, },
            {{48, 102, -290}, },
            {{45, 78, -125}, {79, 79, 389}, {80, 110, -125}, {111, 111, 390}, {112, 122, 95}, },
            {{45, 122, -293}, },
            {{48, 57, 295}, },
            {{48, 57, 295}, },
            {{48, 57, 295}, },
            {{45, 77, -29}, {78, 78, 391}, {79, 109, -101}, {110, 110, 392}, {111, 122, 95}, },
            {{45, 122, -298}, },
            {{45, 81, -120}, {82, 82, 393}, {83, 113, -120}, {114, 114, 394}, {115, 122, 95}, },
            {{45, 122, -300}, },
            {{45, 74, -249}, {75, 75, 395}, {76, 106, -249}, {107, 107, 396}, {108, 122, 95}, },
            {{45, 122, -302}, },
            {{45, 57, -21}, {65, 65, 397}, {66, 90, 91}, {97, 97, 398}, {98, 122, 95}, },
            {{45, 122, -304}, },
            {{45, 45, 399}, {48, 84, -30}, {85, 85, 400}, {86, 116, -30}, {117, 117, 401}, {118, 122, 95}, },
            {{45, 122, -306}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 77, -29}, {78, 78, 402}, {79, 109, -101}, {110, 110, 403}, {111, 122, 95}, },
            {{45, 122, -310}, },
            {{45, 68, -31}, {69, 69, 404}, {70, 100, -31}, {101, 101, 405}, {102, 122, 95}, },
            {{45, 122, -312}, },
            {{45, 75, -21}, {76, 76, 406}, {77, 107, -27}, {108, 108, 407}, {109, 122, 95}, },
            {{45, 122, -314}, },
            {{45, 81, -120}, {82, 82, 408}, {83, 113, -120}, {114, 114, 409}, {115, 122, 95}, },
            {{45, 122, -316}, },
            {{45, 68, -31}, {69, 69, 410}, {70, 100, -31}, {101, 101, 411}, {102, 122, 95}, },
            {{45, 122, -318}, },
            {{45, 57, -21}, {65, 65, 412}, {66, 90, 91}, {97, 97, 413}, {98, 122, 95}, },
            {{45, 122, -320}, },
            {{45, 83, -111}, {84, 84, 414}, {85, 115, -111}, {116, 116, 415}, {117, 122, 95}, },
            {{45, 122, -322}, },
            {{45, 57, -21}, {65, 65, 416}, {66, 90, 91}, {97, 97, 417}, {98, 122, 95}, },
            {{45, 122, -324}, },
            {{45, 45, 418}, {48, 122, -33}, },
            {{45, 122, -326}, },
            {{45, 87, -25}, {88, 88, 419}, {89, 119, -25}, {120, 120, 420}, {121, 122, 95}, },
            {{45, 122, -328}, },
            {{45, 72, -22}, {73, 73, 421}, {74, 104, -28}, {105, 105, 422}, {106, 122, 95}, },
            {{45, 122, -330}, },
            {{45, 72, -22}, {73, 73, 423}, {74, 104, -28}, {105, 105, 424}, {106, 122, 95}, },
            {{45, 122, -332}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 57, -21}, {65, 85, 91}, {86, 86, 425}, {87, 90, 91}, {97, 117, 95}, {118, 118, 426}, {119, 122, 95}, },
            {{45, 78, -125}, {79, 79, 427}, {80, 85, 91}, {86, 86, 428}, {87, 90, 91}, {97, 110, 95}, {111, 111, 429}, {112, 117, 95}, {118, 118, 430}, {119, 122, 95}, },
            {{45, 122, -337}, },
            {{45, 82, -41}, {83, 83, 431}, {84, 114, -41}, {115, 115, 432}, {116, 122, 95}, },
            {{45, 122, -339}, },
            {{45, 66, -96}, {67, 67, 433}, {68, 98, -96}, {99, 99, 434}, {100, 122, 95}, },
            {{45, 122, -341}, },
            {{45, 81, -120}, {82, 82, 435}, {83, 113, -120}, {114, 114, 436}, {115, 122, 95}, },
            {{45, 122, -343}, },
            {{45, 68, -31}, {69, 69, 437}, {70, 100, -31}, {101, 101, 438}, {102, 122, 95}, },
            {{45, 122, -345}, },
            {{45, 84, -30}, {85, 85, 439}, {86, 116, -30}, {117, 117, 440}, {118, 122, 95}, },
            {{45, 122, -347}, },
            {{45, 83, -111}, {84, 84, 441}, {85, 115, -111}, {116, 116, 442}, {117, 122, 95}, },
            {{45, 122, -349}, },
            {{45, 68, -31}, {69, 69, 443}, {70, 100, -31}, {101, 101, 444}, {102, 122, 95}, },
            {{45, 122, -351}, },
            {{45, 68, -31}, {69, 69, 445}, {70, 100, -31}, {101, 101, 446}, {102, 122, 95}, },
            {{45, 122, -353}, },
            {{45, 57, -21}, {65, 69, 91}, {70, 70, 447}, {71, 90, 91}, {97, 101, 95}, {102, 102, 448}, {103, 122, 95}, },
            {{45, 122, -355}, },
            {{45, 81, -120}, {82, 82, 449}, {83, 113, -120}, {114, 114, 450}, {115, 122, 95}, },
            {{45, 122, -357}, },
            {{45, 76, -108}, {77, 77, 451}, {78, 108, -108}, {109, 109, 452}, {110, 122, 95}, },
            {{45, 122, -359}, },
            {{45, 83, -111}, {84, 84, 453}, {85, 115, -111}, {116, 116, 454}, {117, 122, 95}, },
            {{45, 122, -361}, },
            {{45, 81, -120}, {82, 82, 455}, {83, 113, -120}, {114, 114, 456}, {115, 122, 95}, },
            {{45, 122, -363}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 68, -31}, {69, 69, 457}, {70, 100, -31}, {101, 101, 458}, {102, 122, 95}, },
            {{45, 122, -367}, },
            {{45, 71, -23}, {72, 72, 459}, {73, 103, -43}, {104, 104, 460}, {105, 122, 95}, },
            {{45, 122, -369}, },
            {{45, 84, -30}, {85, 85, 461}, {86, 116, -30}, {117, 117, 462}, {118, 122, 95}, },
            {{45, 122, -33}, },
            {{45, 122, -371}, },
            {{45, 122, -33}, },
            {{45, 82, -41}, {83, 83, 463}, {84, 114, -41}, {115, 115, 464}, {116, 122, 95}, },
            {{45, 122, -375}, },
            {{45, 75, -21}, {76, 76, 465}, {77, 107, -27}, {108, 108, 466}, {109, 122, 95}, },
            {{45, 122, -377}, },
            {{45, 68, -31}, {69, 69, 467}, {70, 100, -31}, {101, 101, 468}, {102, 122, 95}, },
            {{45, 122, -379}, },
            {{45, 68, -31}, {69, 69, 469}, {70, 100, -31}, {101, 101, 470}, {102, 122, 95}, },
            {{45, 122, -381}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{34, 34, 471}, {48, 102, -187}, },
            {{34, 102, -385}, },
            {{34, 102, -385}, },
            {{39, 39, 472}, {48, 102, -188}, },
            {{39, 102, -388}, },
            {{39, 102, -388}, },
            {{45, 68, -31}, {69, 69, 473}, {70, 82, 91}, {83, 83, 474}, {84, 90, 91}, {97, 100, 95}, {101, 101, 475}, {102, 114, 95}, {115, 115, 476}, {116, 122, 95}, },
            {{45, 122, -391}, },
            {{45, 67, -129}, {68, 68, 477}, {69, 99, -129}, {100, 100, 478}, {101, 122, 95}, },
            {{45, 122, -393}, },
            {{45, 88, -135}, {89, 89, 479}, {90, 120, -135}, {121, 121, 480}, {122, 122, 95}, },
            {{45, 122, -395}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 66, -96}, {67, 67, 481}, {68, 98, -96}, {99, 99, 482}, {100, 122, 95}, },
            {{45, 122, -399}, },
            {{45, 45, 89}, {48, 48, 90}, {49, 49, 483}, {50, 50, 484}, {51, 51, 485}, {52, 52, 486}, {53, 53, 487}, {54, 54, 488}, {55, 57, 90}, {65, 122, -33}, },
            {{45, 83, -111}, {84, 84, 489}, {85, 115, -111}, {116, 116, 490}, {117, 122, 95}, },
            {{45, 122, -402}, },
            {{45, 67, -129}, {68, 68, 491}, {69, 99, -129}, {100, 100, 492}, {101, 122, 95}, },
            {{45, 122, -404}, },
            {{45, 77, -29}, {78, 78, 493}, {79, 109, -101}, {110, 110, 494}, {111, 122, 95}, },
            {{45, 122, -406}, },
            {{45, 57, -21}, {65, 65, 495}, {66, 90, 91}, {97, 97, 496}, {98, 122, 95}, },
            {{45, 122, -408}, },
            {{45, 77, -29}, {78, 78, 497}, {79, 109, -101}, {110, 110, 498}, {111, 122, 95}, },
            {{45, 122, -410}, },
            {{45, 81, -120}, {82, 82, 499}, {83, 113, -120}, {114, 114, 500}, {115, 122, 95}, },
            {{45, 122, -412}, },
            {{45, 83, -111}, {84, 84, 501}, {85, 115, -111}, {116, 116, 502}, {117, 122, 95}, },
            {{45, 122, -414}, },
            {{45, 72, -22}, {73, 73, 503}, {74, 104, -28}, {105, 105, 504}, {106, 122, 95}, },
            {{45, 122, -416}, },
            {{45, 75, -21}, {76, 76, 505}, {77, 107, -27}, {108, 108, 506}, {109, 122, 95}, },
            {{45, 122, -418}, },
            {{45, 85, -336}, {86, 86, 507}, {87, 117, -336}, {118, 118, 508}, {119, 122, 95}, },
            {{45, 68, -31}, {69, 69, 509}, {70, 100, -31}, {101, 101, 510}, {102, 122, 95}, },
            {{45, 122, -421}, },
            {{45, 69, -355}, {70, 70, 511}, {71, 101, -355}, {102, 102, 512}, {103, 122, 95}, },
            {{45, 122, -423}, },
            {{45, 77, -29}, {78, 78, 513}, {79, 109, -101}, {110, 110, 514}, {111, 122, 95}, },
            {{45, 122, -425}, },
            {{45, 57, -21}, {65, 65, 515}, {66, 90, 91}, {97, 97, 516}, {98, 122, 95}, },
            {{45, 122, -427}, },
            {{45, 77, -29}, {78, 78, 517}, {79, 109, -101}, {110, 110, 518}, {111, 122, 95}, },
            {{45, 68, -31}, {69, 69, 519}, {70, 100, -31}, {101, 101, 520}, {102, 122, 95}, },
            {{45, 122, -429}, },
            {{45, 122, -430}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 83, -111}, {84, 84, 521}, {85, 115, -111}, {116, 116, 522}, {117, 122, 95}, },
            {{45, 122, -435}, },
            {{45, 82, -41}, {83, 83, 523}, {84, 114, -41}, {115, 115, 524}, {116, 122, 95}, },
            {{45, 122, -437}, },
            {{45, 67, -129}, {68, 68, 525}, {69, 99, -129}, {100, 100, 526}, {101, 122, 95}, },
            {{45, 122, -439}, },
            {{45, 81, -120}, {82, 82, 527}, {83, 113, -120}, {114, 114, 528}, {115, 122, 95}, },
            {{45, 122, -441}, },
            {{45, 68, -31}, {69, 69, 529}, {70, 100, -31}, {101, 101, 530}, {102, 122, 95}, },
            {{45, 122, -443}, },
            {{45, 67, -129}, {68, 68, 531}, {69, 99, -129}, {100, 100, 532}, {101, 122, 95}, },
            {{45, 122, -445}, },
            {{45, 82, -41}, {83, 83, 533}, {84, 114, -41}, {115, 115, 534}, {116, 122, 95}, },
            {{45, 122, -447}, },
            {{45, 72, -22}, {73, 73, 535}, {74, 104, -28}, {105, 105, 536}, {106, 122, 95}, },
            {{45, 122, -449}, },
            {{45, 68, -31}, {69, 69, 537}, {70, 100, -31}, {101, 101, 538}, {102, 122, 95}, },
            {{45, 122, -451}, },
            {{45, 68, -31}, {69, 69, 539}, {70, 100, -31}, {101, 101, 540}, {102, 122, 95}, },
            {{45, 122, -453}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 57, -21}, {65, 65, 541}, {66, 90, 91}, {97, 97, 542}, {98, 122, 95}, },
            {{45, 122, -457}, },
            {{45, 82, -41}, {83, 83, 543}, {84, 114, -41}, {115, 115, 544}, {116, 122, 95}, },
            {{45, 122, -459}, },
            {{45, 81, -120}, {82, 82, 545}, {83, 113, -120}, {114, 114, 546}, {115, 122, 95}, },
            {{45, 122, -461}, },
            {{45, 70, -127}, {71, 71, 547}, {72, 102, -127}, {103, 103, 548}, {104, 122, 95}, },
            {{45, 122, -463}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 72, -22}, {73, 73, 549}, {74, 104, -28}, {105, 105, 550}, {106, 122, 95}, },
            {{45, 122, -467}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 82, -41}, {83, 83, 551}, {84, 114, -41}, {115, 115, 552}, {116, 122, 95}, },
            {{45, 122, -471}, },
            {},
            {},
            {{45, 82, -41}, {83, 83, 553}, {84, 114, -41}, {115, 115, 554}, {116, 122, 95}, },
            {{45, 122, -33}, },
            {{45, 122, -475}, },
            {{45, 122, -33}, },
            {{45, 72, -22}, {73, 73, 555}, {74, 104, -28}, {105, 105, 556}, {106, 122, 95}, },
            {{45, 122, -479}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 83, -111}, {84, 84, 557}, {85, 115, -111}, {116, 116, 558}, {117, 122, 95}, },
            {{45, 122, -483}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 57, -21}, {65, 65, 559}, {66, 90, 91}, {97, 97, 560}, {98, 122, 95}, },
            {{45, 122, -491}, },
            {{45, 72, -22}, {73, 73, 561}, {74, 104, -28}, {105, 105, 562}, {106, 122, 95}, },
            {{45, 122, -493}, },
            {{45, 67, -129}, {68, 68, 563}, {69, 99, -129}, {100, 100, 564}, {101, 122, 95}, },
            {{45, 122, -495}, },
            {{45, 88, -135}, {89, 89, 565}, {90, 120, -135}, {121, 121, 566}, {122, 122, 95}, },
            {{45, 122, -497}, },
            {{45, 57, -21}, {65, 65, 567}, {66, 90, 91}, {97, 97, 568}, {98, 122, 95}, },
            {{45, 122, -499}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 78, -125}, {79, 79, 569}, {80, 110, -125}, {111, 111, 570}, {112, 122, 95}, },
            {{45, 122, -505}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 57, -21}, {65, 65, 571}, {66, 90, 91}, {97, 97, 572}, {98, 122, 95}, },
            {{45, 122, -509}, },
            {{45, 67, -129}, {68, 68, 573}, {69, 99, -129}, {100, 100, 574}, {101, 122, 95}, },
            {{45, 122, -511}, },
            {{45, 72, -22}, {73, 73, 575}, {74, 104, -28}, {105, 105, 576}, {106, 122, 95}, },
            {{45, 122, -513}, },
            {{45, 70, -127}, {71, 71, 577}, {72, 102, -127}, {103, 103, 578}, {104, 122, 95}, },
            {{45, 122, -515}, },
            {{45, 75, -21}, {76, 76, 579}, {77, 107, -27}, {108, 108, 580}, {109, 122, 95}, },
            {{45, 122, -517}, },
            {{45, 57, -21}, {65, 65, 581}, {66, 90, 91}, {97, 97, 582}, {98, 122, 95}, },
            {{45, 122, -519}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 45, 583}, {48, 122, -33}, },
            {{45, 122, -527}, },
            {{45, 68, -31}, {69, 69, 584}, {70, 100, -31}, {101, 101, 585}, {102, 122, 95}, },
            {{45, 122, -529}, },
            {{45, 81, -120}, {82, 82, 586}, {83, 113, -120}, {114, 114, 587}, {115, 122, 95}, },
            {{45, 122, -531}, },
            {{45, 84, -30}, {85, 85, 588}, {86, 116, -30}, {117, 117, 589}, {118, 122, 95}, },
            {{45, 122, -533}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 77, -29}, {78, 78, 590}, {79, 109, -101}, {110, 110, 591}, {111, 122, 95}, },
            {{45, 122, -537}, },
            {{45, 77, -29}, {78, 78, 592}, {79, 109, -101}, {110, 110, 593}, {111, 122, 95}, },
            {{45, 122, -539}, },
            {{45, 82, -41}, {83, 83, 594}, {84, 114, -41}, {115, 115, 595}, {116, 122, 95}, },
            {{45, 122, -541}, },
            {{45, 83, -111}, {84, 84, 596}, {85, 115, -111}, {116, 116, 597}, {117, 122, 95}, },
            {{45, 122, -543}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 78, -125}, {79, 79, 598}, {80, 110, -125}, {111, 111, 599}, {112, 122, 95}, },
            {{45, 122, -547}, },
            {{45, 71, -23}, {72, 72, 600}, {73, 103, -43}, {104, 104, 601}, {105, 122, 95}, },
            {{45, 122, -549}, },
            {{45, 77, -29}, {78, 78, 602}, {79, 109, -101}, {110, 110, 603}, {111, 122, 95}, },
            {{45, 122, -551}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 77, -29}, {78, 78, 604}, {79, 109, -101}, {110, 110, 605}, {111, 122, 95}, },
            {{45, 122, -557}, },
            {{45, 68, -31}, {69, 69, 606}, {70, 100, -31}, {101, 101, 607}, {102, 122, 95}, },
            {{45, 122, -559}, },
            {{45, 83, -111}, {84, 84, 608}, {85, 115, -111}, {116, 116, 609}, {117, 122, 95}, },
            {{45, 122, -561}, },
            {{45, 77, -29}, {78, 78, 610}, {79, 109, -101}, {110, 110, 611}, {111, 122, 95}, },
            {{45, 122, -563}, },
            {{45, 72, -22}, {73, 73, 612}, {74, 104, -28}, {105, 105, 613}, {106, 122, 95}, },
            {{45, 122, -565}, },
            {{45, 45, 614}, {48, 122, -33}, },
            {{45, 122, -567}, },
            {{45, 75, -21}, {76, 76, 615}, {77, 107, -27}, {108, 108, 616}, {109, 122, 95}, },
            {{45, 122, -569}, },
            {{45, 77, -29}, {78, 78, 617}, {79, 109, -101}, {110, 110, 618}, {111, 122, 95}, },
            {{45, 122, -571}, },
            {{45, 75, -21}, {76, 76, 619}, {77, 107, -27}, {108, 108, 620}, {109, 122, 95}, },
            {{45, 122, -573}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 68, -31}, {69, 69, 621}, {70, 100, -31}, {101, 101, 622}, {102, 122, 95}, },
            {{45, 122, -577}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 84, -30}, {85, 85, 623}, {86, 116, -30}, {117, 117, 624}, {118, 122, 95}, },
            {{45, 122, -581}, },
            {{45, 75, -21}, {76, 76, 625}, {77, 107, -27}, {108, 108, 626}, {109, 122, 95}, },
            {{45, 122, -583}, },
            {{45, 67, -129}, {68, 68, 627}, {69, 99, -129}, {100, 100, 628}, {101, 122, 95}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 81, -120}, {82, 82, 629}, {83, 113, -120}, {114, 114, 630}, {115, 122, 95}, },
            {{45, 122, -590}, },
            {{45, 68, -31}, {69, 69, 631}, {70, 100, -31}, {101, 101, 632}, {102, 122, 95}, },
            {{45, 122, -592}, },
            {{45, 66, -96}, {67, 67, 633}, {68, 98, -96}, {99, 99, 634}, {100, 122, 95}, },
            {{45, 122, -594}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 68, -31}, {69, 69, 635}, {70, 100, -31}, {101, 101, 636}, {102, 122, 95}, },
            {{45, 122, -598}, },
            {{45, 77, -29}, {78, 78, 637}, {79, 109, -101}, {110, 110, 638}, {111, 122, 95}, },
            {{45, 122, -600}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 70, -127}, {71, 71, 639}, {72, 102, -127}, {103, 103, 640}, {104, 122, 95}, },
            {{45, 122, -604}, },
            {{45, 70, -127}, {71, 71, 641}, {72, 102, -127}, {103, 103, 642}, {104, 122, 95}, },
            {{45, 122, -606}, },
            {{45, 81, -120}, {82, 82, 643}, {83, 113, -120}, {114, 114, 644}, {115, 122, 95}, },
            {{45, 122, -608}, },
            {{45, 72, -22}, {73, 73, 645}, {74, 104, -28}, {105, 105, 646}, {106, 122, 95}, },
            {{45, 122, -610}, },
            {{45, 70, -127}, {71, 71, 647}, {72, 102, -127}, {103, 103, 648}, {104, 122, 95}, },
            {{45, 122, -612}, },
            {{45, 77, -29}, {78, 78, 649}, {79, 109, -101}, {110, 110, 650}, {111, 122, 95}, },
            {{45, 122, -614}, },
            {{45, 48, -401}, {49, 49, 651}, {50, 57, 90}, {65, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 45, 652}, {48, 122, -33}, },
            {{45, 122, -619}, },
            {{45, 84, -30}, {85, 85, 653}, {86, 116, -30}, {117, 117, 654}, {118, 122, 95}, },
            {{45, 122, -621}, },
            {{45, 67, -129}, {68, 68, 655}, {69, 99, -129}, {100, 100, 656}, {101, 122, 95}, },
            {{45, 122, -623}, },
            {{45, 68, -31}, {69, 69, 657}, {70, 100, -31}, {101, 101, 658}, {102, 122, 95}, },
            {{45, 122, -625}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 68, -31}, {69, 69, 659}, {70, 100, -31}, {101, 101, 660}, {102, 122, 95}, },
            {{45, 122, -629}, },
            {{45, 68, -31}, {69, 69, 661}, {70, 100, -31}, {101, 101, 662}, {102, 122, 95}, },
            {{45, 122, -631}, },
            {{45, 82, -41}, {83, 83, 663}, {84, 114, -41}, {115, 115, 664}, {116, 122, 95}, },
            {{45, 122, -633}, },
            {{45, 68, -31}, {69, 69, 665}, {70, 100, -31}, {101, 101, 666}, {102, 122, 95}, },
            {{45, 122, -635}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 72, -22}, {73, 73, 667}, {74, 104, -28}, {105, 105, 668}, {106, 122, 95}, },
            {{45, 122, -639}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 78, -125}, {79, 79, 669}, {80, 110, -125}, {111, 111, 670}, {112, 122, 95}, },
            {{45, 122, -647}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 70, -127}, {71, 71, 671}, {72, 102, -127}, {103, 103, 672}, {104, 122, 95}, },
            {{45, 122, -651}, },
            {{45, 122, -33}, },
            {{45, 79, -112}, {80, 80, 673}, {81, 111, -165}, {112, 112, 674}, {113, 122, 95}, },
            {{45, 68, -31}, {69, 69, 675}, {70, 100, -31}, {101, 101, 676}, {102, 122, 95}, },
            {{45, 122, -655}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 82, -41}, {83, 83, 677}, {84, 114, -41}, {115, 115, 678}, {116, 122, 95}, },
            {{45, 122, -659}, },
            {{45, 66, -96}, {67, 67, 679}, {68, 98, -96}, {99, 99, 680}, {100, 122, 95}, },
            {{45, 122, -661}, },
            {{45, 45, 681}, {48, 122, -33}, },
            {{45, 122, -663}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 57, -21}, {65, 89, 91}, {90, 90, 682}, {97, 121, 95}, {122, 122, 683}, },
            {{45, 122, -669}, },
            {{45, 77, -29}, {78, 78, 684}, {79, 109, -101}, {110, 110, 685}, {111, 122, 95}, },
            {{45, 122, -671}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 78, -125}, {79, 79, 686}, {80, 110, -125}, {111, 111, 687}, {112, 122, 95}, },
            {{45, 122, -675}, },
            {{45, 82, -41}, {83, 83, 688}, {84, 114, -41}, {115, 115, 689}, {116, 122, 95}, },
            {{45, 122, -677}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 72, -22}, {73, 73, 690}, {74, 104, -28}, {105, 105, 691}, {106, 122, 95}, },
            {{45, 122, -681}, },
            {{45, 79, -112}, {80, 80, 692}, {81, 111, -165}, {112, 112, 693}, {113, 122, 95}, },
            {{45, 68, -31}, {69, 69, 694}, {70, 100, -31}, {101, 101, 695}, {102, 122, 95}, },
            {{45, 122, -684}, },
            {{45, 57, -21}, {65, 65, 696}, {66, 90, 91}, {97, 97, 697}, {98, 122, 95}, },
            {{45, 122, -686}, },
            {{45, 72, -22}, {73, 73, 698}, {74, 104, -28}, {105, 105, 699}, {106, 122, 95}, },
            {{45, 122, -688}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 76, -108}, {77, 77, 700}, {78, 108, -108}, {109, 109, 701}, {110, 122, 95}, },
            {{45, 122, -692}, },
            {{45, 78, -125}, {79, 79, 702}, {80, 110, -125}, {111, 111, 703}, {112, 122, 95}, },
            {{45, 122, -694}, },
            {{45, 67, -129}, {68, 68, 704}, {69, 99, -129}, {100, 100, 705}, {101, 122, 95}, },
            {{45, 122, -696}, },
            {{45, 75, -21}, {76, 76, 706}, {77, 107, -27}, {108, 108, 707}, {109, 122, 95}, },
            {{45, 122, -698}, },
            {{45, 77, -29}, {78, 78, 708}, {79, 109, -101}, {110, 110, 709}, {111, 122, 95}, },
            {{45, 122, -700}, },
            {{45, 57, -21}, {65, 65, 710}, {66, 90, 91}, {97, 97, 711}, {98, 122, 95}, },
            {{45, 122, -702}, },
            {{45, 72, -22}, {73, 73, 712}, {74, 104, -28}, {105, 105, 713}, {106, 122, 95}, },
            {{45, 122, -704}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 45, 714}, {48, 122, -33}, },
            {{45, 122, -708}, },
            {{45, 83, -111}, {84, 84, 715}, {85, 115, -111}, {116, 116, 716}, {117, 122, 95}, },
            {{45, 122, -710}, },
            {{45, 75, -21}, {76, 76, 717}, {77, 107, -27}, {108, 108, 718}, {109, 122, 95}, },
            {{45, 122, -712}, },
            {{45, 77, -29}, {78, 78, 719}, {79, 109, -101}, {110, 110, 720}, {111, 122, 95}, },
            {{45, 122, -714}, },
            {{45, 48, -401}, {49, 49, 721}, {50, 50, 722}, {51, 51, 723}, {52, 52, 724}, {53, 53, 725}, {54, 54, 726}, {55, 122, -401}, },
            {{45, 68, -31}, {69, 69, 727}, {70, 100, -31}, {101, 101, 728}, {102, 122, 95}, },
            {{45, 122, -717}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 83, -111}, {84, 84, 729}, {85, 115, -111}, {116, 116, 730}, {117, 122, 95}, },
            {{45, 122, -721}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 81, -120}, {82, 82, 731}, {83, 113, -120}, {114, 114, 732}, {115, 122, 95}, },
            {{45, 122, -729}, },
            {{45, 68, -31}, {69, 69, 733}, {70, 100, -31}, {101, 101, 734}, {102, 122, 95}, },
            {{45, 122, -731}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 81, -120}, {82, 82, 735}, {83, 113, -120}, {114, 114, 736}, {115, 122, 95}, },
            {{45, 122, -735}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {14, 80, 0, 0, 0, 0, 80, 8, 80, 9, 10, 7, 5, 3, 6, 2, 4, 12, 12, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 0, 0, 0, 0, 0, -1, 13, -1, 13, -1, 1, 1, -1, 14, 16, 14, 15, 12, 79, 79, 11, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 23, 79, 79, 23, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 45, 79, 45, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 56, 79, 79, 56, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 72, 79, 79, 79, 72, 79, 79, 79, 79, 79, 79, 79, -1, -1, 79, 79, -1, -1, 1, -1, 18, 18, 19, 19, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 47, 47, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 58, 58, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, -1, -1, -1, -1, -1, -1, 79, 79, -1, -1, 14, 79, 79, 79, 79, 79, 79, 79, 79, 25, 25, 32, 32, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 46, 46, 79, 79, 49, 49, 79, 79, 79, 53, 53, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 67, 67, 79, 79, 69, 69, 79, 70, 79, 70, 79, 79, 79, 79, 79, 79, 79, 79, 77, 77, -1, -1, -1, -1, -1, -1, 78, 78, 79, 79, 79, 79, 22, 22, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 43, 43, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 53, 53, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 61, 61, 79, 79, 79, 79, 79, 79, 65, 65, 79, 79, 68, 68, 79, 79, 79, 79, 71, 71, 79, 79, 74, 74, 75, 75, 13, 13, 79, 78, 79, 78, 79, 79, 21, 21, 79, 79, 26, 27, 28, 29, 30, 31, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 38, 38, 39, 39, 79, 79, 41, 41, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 52, 52, 54, 54, 55, 55, 79, 79, 79, 79, 79, 79, 79, 79, 61, 61, 79, 79, 79, 79, 79, 79, 79, 79, 68, 68, 79, 79, 79, 79, 79, 79, 76, 76, 78, 78, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 35, 35, 79, 79, 79, 79, 79, 79, 44, 44, 79, 79, 48, 48, 79, 79, 79, 79, 79, 58, 58, 59, 59, 79, 79, 79, 79, 79, 79, 64, 64, 79, 79, 79, 79, 70, 70, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 37, 37, 79, 79, 79, 79, 79, 79, 79, 79, 51, 51, 79, 79, 79, 79, 79, 79, 79, 79, 66, 66, 79, 79, 73, 73, 20, 20, 24, 24, 79, 79, 33, 33, 79, 79, 36, 79, 79, 79, 46, 46, 50, 50, 79, 79, 79, 79, 62, 62, 63, 63, 79, 79, 79, 79, 34, 34, 79, 79, 42, 42, 50, 50, 79, 79, 79, 79, 79, 79, 79, 79, 79, 42, 42, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 69, 69, 25, 25, 79, 79, 79, 79, 79, 79, 79, 79, 79, 57, 57, 79, 79, 26, 27, 28, 29, 30, 31, 79, 79, 79, 79, 40, 40, 79, 79, 60, 60, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(int id)
        {
            this.id = id;
        }

        public int id()
        {
            return id;
        }
    }
}
