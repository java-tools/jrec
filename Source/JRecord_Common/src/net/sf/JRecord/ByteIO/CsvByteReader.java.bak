/**
 *
 */
package net.sf.JRecord.ByteIO;

import net.sf.JRecord.Common.Conversion;

/**
 *
 * Reads a file one line at a time (used for single byte character sets only).
 *`
 * @author Bruce Martin
 *
 */
public class CsvByteReader extends BaseByteTextReader {

	private final byte[] fieldSep;
	private final byte[] quote;
	private final byte[] quoteEsc;
	private final byte[] sepQuote;
	private final byte[] quoteSep;
	private byte[] quoteEol = EMPTY;
	private byte[] quoteEol2 = EMPTY;


	public CsvByteReader(String charSet, String fieldSep, String quote, String quoteEsc) {
		this(	null,
				Conversion.getCsvDelimBytes(fieldSep, charSet),
				Conversion.getBytes(quote, charSet),
				Conversion.getBytes(quoteEsc, charSet));

		setLfCr(charSet);
	}

	public CsvByteReader(byte[] eol, byte[] fieldSep, byte[] quote, byte[] quoteEsc) {
		super();
		super.eol = eol;
		this.fieldSep = fieldSep;
		this.quoteEsc = quoteEsc == null ? EMPTY : quoteEsc;

		if (quote == null || quote.length == 0) {
			this.quote = EMPTY;
			this.sepQuote = EMPTY;
			this.quoteSep = EMPTY;
		} else {
			this.quote = quote;
			this.sepQuote = new byte[fieldSep.length + quote.length];
			this.quoteSep =  new byte[sepQuote.length];

			System.arraycopy(fieldSep, 0, sepQuote, 0, fieldSep.length);
			System.arraycopy(quote,    0, sepQuote,    fieldSep.length, quote.length);

			System.arraycopy(quote,   0,  quoteSep, 0, quote.length);
			System.arraycopy(fieldSep, 0, quoteSep,    quote.length, fieldSep.length);
//			System.out.println("sepQuote: " + sepQuote[0] + "\t" + sepQuote[1]);
//			System.out.println("quoteSep: " + quoteSep[0] + "\t" + quoteSep[1]);
		}

//		if (quoteEsc.length > 0 && quoteEsc.length == 2 * this.quote.length) {
//			for (int i = 0; i < quoteEsc.length; i++) {
//				if (quoteEsc[i] != quote[i % (quote.length + 1)]) {
//					break;
//				}
//			}
//		}
	}


	/* (non-Javadoc)
	 * @see net.sf.JRecord.ByteIO.BaseByteTextReader#open(java.io.InputStream)
	 */
	@Override
	protected void  setLineSearch() {

		this.quoteEol = eol;

		if (eol.length == 0) {
			this.quoteEol = EMPTY;
		} else if (quote.length == 0) {
			findLines = new StdFindLines();
		} else {
			this.quoteEol = new byte[quote.length + eol.length];
			System.arraycopy(quote, 0, quoteEol, 0, quote.length);
			System.arraycopy(eol,   0, quoteEol,    quote.length, eol.length);
			//System.out.println("quoteEol: " + quoteEol[0] + "\t" + quoteEol[1]);

			if (super.check4lf) {
				this.quoteEol2 = new byte[quote.length + eol.length + 1];
				System.arraycopy(quote, 0, quoteEol2, 0, quote.length);
				quoteEol2[quote.length] = super.byteLF;
				System.arraycopy(eol,   0, quoteEol2,    quote.length+1, eol.length);
			}

			String eols = "none ";
			if (eol == null) {

			} else if (eol.length == 1) {
				eols = "" + (0 + eol[0]);
			} else if (eol.length >= 2) {
				eols = "{" + (0 +eol[0]) + ", " +  (0 +eol[1]) + "}";
			}
			if (quoteEsc.length == 0) {
				System.out.println("NoQuoteEsc, quote=`" + quote[0] + "` " + eols
						+ " " + check4lf + " " + check4cr);
				findLines = new NoQuoteEsc();
			} else {
				System.out.println("QuoteEsc, quote=`" + quote[0] + "` " + eols
						+ " " + check4lf + " " + check4cr + " " + byteLF + " " + byteCR);
				findLines = new QuoteEsc();
/*				boolean doubleQuoteEsc = false;
				if (quoteEsc.length == 2 * this.quote.length) {
					doubleQuoteEsc = true;
					for (int i = 0; i < quoteEsc.length; i++) {
						if (quoteEsc[i] != quote[i % (quote.length + 1)]) {
							doubleQuoteEsc = false;
							break;
						}
					}
				}

				if (doubleQuoteEsc) {

				} else {

				}*/
			}
		}
	}

//	private static byte[] getEolBytes(String charSet) {
//
//		byte[] b = Conversion.getBytes("\n", charSet);
//		if (b == null || b.length == 0 || b[0] == Constants.BYTE_CR || b[0] == Constants.BYTE_LF) {
//			return null;
//		}
//
//		return b;
//	}

/**	protected void findLinesInBuffer(int start) {

		lineArray[0] = start;
		noLines = 1;
		lineNo = 0;
		findLines.findLinesInBuffer(start);

/*   **********************************************
		byte last = -128;
		int idx = eol.length - 1;
		lineArray[0] = start;
		noLines = 1;
		lineNo = 0;
		int lineStart = 0;
		boolean inQuote = false;
		boolean inLastQuote = false;

		if (idx >= 0) {

			if (quoteEsc.length == 0) {
				while (noLines < lineArray.length && start < bytesInBuffer && start >= 0) {
					if (checkFor(start, sepQuote)) {
						inQuote = true;
					}
				}
			}
			while (noLines < lineArray.length && start < bytesInBuffer && start >= 0) {
				if (checkFor(start, quoteEsc)) {
					inLastQuote = inQuote;
					inQuote = inLastQuote;
				} else if ((lineStart==start && checkFor(start, quote)
						|| (quoteEsc.length == 0 && checkFor(start, sepQuote)))) {
					inQuote = true;
				} else if (quoteEsc.length > 0 && checkFor(start, quote)) {
					inLastQuote = inQuote;
					inQuote = ! inQuote;
				} else if (  checkFor(start, quoteEol)
						|| ((! inQuote) && checkFor(start, eol))) {
					lineStart = start+1;
					lineArray[noLines] = lineStart;
					noLines += 1;
					inLastQuote = false;
					inQuote = false;
				}

				last = buffer[start];
				start += 1;
			}
		}


	}*/

	protected final boolean checkFor(int pos, byte[] search) {
		//System.out.println("!! " + pos + " " + (search.length - 1) );
		if (pos < search.length - 1 || search.length == 0) {
			return false;
		}

		int bufferStart = pos - search.length + 1;
		for (int i = 0; i < search.length; i++) {
			if (search[i] != super.buffer[bufferStart + i]) {
				return false;
			}
		}

		return true;
	}

	private class NoQuoteEsc implements FindLines {
		public void findLinesInBuffer(int start) {
			int lineStart = start;
			boolean inQuote = false;

			while (noLines < lineArray.length && start < bytesInBuffer && start >= 0) {
				if (checkFor(start, sepQuote)
				|| (lineStart == start - quote.length + 1 && checkFor(start, quote))
				) {
					inQuote = true;
				} else if ( checkFor(start, quoteSep)) {
					inQuote = false;
				} else if (  checkFor(start, quoteEol)
						||   checkFor(start, quoteEol2)
						|| ((! inQuote) && checkFor(start, eol))) {
					lineStart = start+1;
					lineArray[noLines] = lineStart;
					noLines += 1;
					inQuote = false;
				}

				start += 1;
			}
		}
	}

	private class QuoteEsc implements FindLines {
		public void findLinesInBuffer(int start) {
			int lineStart = start;
			int fieldStart = start;
			boolean inQuote = false;
			boolean[] followingQuoteEsc = {false, false, false};
//			byte[] bb = {0};

			while (noLines < lineArray.length && start < bytesInBuffer && start >= 0) {
				followingQuoteEsc[2] = followingQuoteEsc[1];
				followingQuoteEsc[1] = followingQuoteEsc[0];
				followingQuoteEsc[0] = false;
//				bb[0] = buffer[start];
//				System.out.print(new String(bb));
//				if ( checkFor(start, eol)) {
//					System.out.print("\t" + inQuote
//							+ " " + followingQuoteEsc[1] + "/" + followingQuoteEsc[2]
//							+ " " + ( (inQuote) && checkFor(start, quoteEsc))
//							+ " " + ( (! inQuote) && checkFor(start, eol))
//							+ " " + checkFor(start, quoteEol)
//							+ " " + buffer[start-1] + " " + buffer[start]
//							+ " " + quoteEol[0] + " " + quoteEol[1]+ "\t");
//					checkFor(start, quoteEol);
//				}
//				System.out.print("\t~" + start + " " + buffer[start] + " " + ((char) buffer[start])
				System.out.print((buffer[start] == 13 ? '\n' :((char) buffer[start])));
//				if (checkFor(start, quote)) {
//					System.out.print( " ~~ " + lineStart + " " + start + " - " + quote.length);
//				}
				if (checkFor(start, sepQuote)
				|| ((lineStart == start - quote.length + 1) && checkFor(start, quote)) ) {
					inQuote = true;
					System.out.print(" a)");
				} else if (eol.length < followingQuoteEsc.length
						&& followingQuoteEsc[eol.length]) {
					System.out.print(" b)");

				} else if ( (inQuote) && checkFor(start, quoteEsc)) {
					System.out.print(" c)");
					followingQuoteEsc[0] = true;
				} else if ( checkFor(start, quoteSep)
						|| ((! inQuote) && checkFor(start, fieldSep))) {
					System.out.print(" d)");
					fieldStart = start + 1;
					inQuote = false;
//					System.out.println("**** "
//							+ Conversion.replace(new String(buffer, lineStart, start), "\n", "\\n"));
				} else if ((	checkFor(start, quoteEol)  && (fieldStart != start - quoteEol.length  + 1))
						|| (	checkFor(start, quoteEol2) && (fieldStart != start - quoteEol2.length + 1))
						|| ((! inQuote) && checkFor(start, eol))) {
					System.out.println();
					System.out.println(" !!! " + fieldStart + " != "
							+ start + " - " + quote.length
							+ " !!! " + inQuote + " " + checkFor(start, quoteEol)
							+ " " + checkFor(start, quoteEol2) + " " + quoteEol.length
							+ " / " + quoteEol[1]);
					lineStart = start+1;
					fieldStart = lineStart;
					lineArray[noLines] = lineStart;
					noLines += 1;
					inQuote = false;
					System.out.println();
					System.out.println("=========================== " + noLines);
				} else if (check4cr && buffer[start] == byteCR && lineStart == start) {

					System.out.print(" *)");
					lineStart += 1;
					fieldStart += 1;
				}

				start += 1;
			}
		}
	}

}
