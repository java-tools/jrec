package net.sf.RecordEditor.utils.protoGen.cobolOpt;
// Generated by proto2javame, Wed Aug 21 10:58:39 EST 2013.

import java.io.IOException;
import java.io.InputStream;
import java.util.Vector;

import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.UninitializedMessageException;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.output.OutputWriter;

public final class RecordCheck extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final String recordName;
	private static final int fieldNumberRecordName = 1;

	private final java.util.Vector fieldExpresions;
	private static final int fieldNumberFieldExpresions = 15;


	public static Builder newBuilder() {
		return new Builder();
	}

	private RecordCheck(final Builder builder) {
		if (builder.hasRecordName ) {
			this.recordName = builder.recordName;
			this.fieldExpresions = builder.fieldExpresions;
		} else {
			throw new UninitializedMessageException("Not all required fields were included (false = not included in message), " +
				" recordName:" + builder.hasRecordName + "");
		}
	}

	public static class Builder {
		private String recordName;
		private boolean hasRecordName = false;

		private java.util.Vector fieldExpresions = new java.util.Vector();
		private boolean hasFieldExpresions = false;


		private Builder() {
		}

		public Builder setRecordName(final String recordName) {
			this.recordName = recordName;
			this.hasRecordName = true;
			return this;
		}

		public Builder setFieldExpresions(final java.util.Vector fieldExpresions) {
			if(!hasFieldExpresions) {
				hasFieldExpresions = true;
			}
			this.fieldExpresions = fieldExpresions;
			return this;
		}


		public Builder addElementFieldExpresions(final FieldCheck element) {
			if(!hasFieldExpresions) {
				hasFieldExpresions = true;
			}
			fieldExpresions.addElement(element);
			return this;
		}

		public RecordCheck build() {
			return new RecordCheck(this);
		}
	}

	public String getRecordName() {
		return recordName;
	}

	public java.util.Vector getFieldExpresions() {
		return fieldExpresions;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		retValue += "recordName = " + this.recordName + TAB;
		retValue += "fieldExpresions = " + this.fieldExpresions + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		totalSize += ComputeSizeUtil.computeStringSize(fieldNumberRecordName, recordName);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;
		messageSize += ComputeSizeUtil.computeListSize(fieldNumberFieldExpresions, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_CUSTOM, fieldExpresions);

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		writer.writeString(fieldNumberRecordName, recordName);
		writer.writeList(fieldNumberFieldExpresions, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_CUSTOM, fieldExpresions);
	}

	static RecordCheck parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final RecordCheck.Builder builder = RecordCheck.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberRecordName:
				builder.setRecordName(reader.readString(fieldNumber));
				break;
			case fieldNumberFieldExpresions:
				Vector vcFieldExpresions = reader.readMessages(fieldNumberFieldExpresions);
				for(int i = 0 ; i < vcFieldExpresions.size(); i++) {
					byte[] eachBinData = (byte[]) vcFieldExpresions.elementAt(i);
					FieldCheck.Builder builderFieldExpresions = FieldCheck.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolFieldExpresions = true;
					int nestedFieldFieldExpresions = -1;
					while(boolFieldExpresions) {
						nestedFieldFieldExpresions = getNextFieldNumber(innerInputReader);
						boolFieldExpresions = FieldCheck.populateBuilderWithField(innerInputReader, builderFieldExpresions, nestedFieldFieldExpresions);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.addElementFieldExpresions(builderFieldExpresions.build());
				}
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		RecordCheck.unknownTagHandler = unknownTagHandler;
	}

	public static RecordCheck parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static RecordCheck parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static RecordCheck parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}