package net.sf.RecordEditor.layoutEd.Record;

import java.sql.PreparedStatement;
import java.sql.SQLException;

import net.sf.RecordEditor.utils.jdbc.AbsDB;



/**
 * This class provides DB Access using
 *
 *   <pre>
 *       Select
 *              ChildRecord,
 *              FieldStart as Start,
 *              Field,
 *              FieldValue
 *       from Tbl_RS_SubRecords
 *       where RecordId = ?
 *
 *   </pre>
 * it also provides Insert / Update / Delete routines (depending on the options selected)
 *
 * @Author Generated by BuildJava.Rexx by Bruce Martin
 */

public class ChildRecordsDB  extends AbsDB<ChildRecordsRec> {


  private static final String[] COLUMN_NAMES = {
                   "Child Record"
                 , "Field Start"
                 , "Field"
                 , "Field Value"
                 , "Tree Parent"
  };


  private PreparedStatement delAllChildRecords = null;
  private int paramRecordId;

  public ChildRecordsDB() {

      resetSearch();

      sSQL = " Select  ChildRecord, FieldStart, Field, FieldValue, PARENT_RECORDID";
      sFrom = "  from Tbl_RS_SubRecords";
      sWhereSQL = "  where RecordId = ?";
      sOrderBy = " ";
      updateSQL = "Update Tbl_RS_SubRecords  "
                   +  " Set ChildRecord= ? "
                   +  "   , FieldStart= ? "
                   +  "   , Field= ? "
                   +  "   , FieldValue= ? "
                   +  "   , PARENT_RECORDID = ?"
                   +  " Where RecordId= ? "
                   +  "   and ChildRecord= ? "
                        ;

      deleteSQL = "Delete From  Tbl_RS_SubRecords  "
                   +  " Where RecordId= ? "
                   +  "   and ChildRecord= ? "
                        ;

      insertSQL = "Insert Into  Tbl_RS_SubRecords  ("
                      + "    ChildRecord"
                      + "  , FieldStart"
                      + "  , Field"
                      + "  , FieldValue"
                      + "  , PARENT_RECORDID" 
                      + "  , RecordId" 
                      + ") Values ("
                      +    "     ?   , ?   , ?   , ?   , ?, ?"
                      + ")";

      super.columnNames = ChildRecordsDB.COLUMN_NAMES;
  }


  /**
   * sets up the DB parameters
   *
   * @param RecordId
   *
   */
  public void setParams( int RecordId) {

      paramRecordId = RecordId;
  }

  /**
   *  This method opens a SQL query
   */
  public void open() {

      prepareCursor();

      try {
          sqlCursor.setInt(1, paramRecordId);

          setStringArgs(1);


          rsCursor  = sqlCursor.executeQuery();
          message = "";
      } catch (Exception ex) {
           setMessage(ex.getMessage(), ex);
      }
  }


//  /**
//   *  This method returns the next record (AbsRecord) from the cursor
//   */
//  public AbsRecord absFetch() {
//      return fetch();
//  }


  /**
   *  This method returns the next record from the cursor
   */
  public ChildRecordsRec fetch() {
  ChildRecordsRec ret = null;

      try {
          if (rsCursor.next()) {
             ret = new ChildRecordsRec(
                        rsCursor.getInt(1)
                      , rsCursor.getInt(2)
                      , rsCursor.getString(3)
                      , rsCursor.getString(4)
                      , rsCursor.getInt(5)
                   );
          }
          message = "";
      } catch (Exception ex) {
           setMessage(ex.getMessage(), ex);
      }

      return ret;
  }


  /**
   *  Get the number of columns returned by the SQL
   */
  public int getColumnCount() {
      return 5;
  }





  /**
   *
   * @param statement statement that needs parameteres set
   * @param value Value to assign to the Statement parameters
   * @param idx parameter index
   *
   * @return updated index
   * @throws SQLException SQL error
   */
  protected int setSQLParams(PreparedStatement statement, ChildRecordsRec value, boolean insert, int idx)
                             throws SQLException {
      ChildRecordsRec val = value;

      statement.setInt(idx++, val.getChildRecord());
      statement.setInt(idx++, val.getStart());
      statement.setString(idx++, correctStr(val.getField()));
      statement.setString(idx++, correctStr(val.getFieldValue()));
      statement.setInt(idx++, val.getParentRecord());

      if (insert) {
    	  statement.setInt(idx++, paramRecordId);
      }

      return idx;
  }


  /**
   * Setup the where parameters
   *
   * @param statement SQL statement
   * @param value Value to assign to the Statement parameters
   * @param idx current index
   * @throws SQLException SQL error
   */
  protected void setWhere(PreparedStatement statement, ChildRecordsRec value, int idx)
                          throws SQLException {
      //ChildRecordsRec val =  value;

      statement.setInt(idx++, paramRecordId);
      statement.setInt(idx++, value.initChildRecord);
  }


  /**
   *  This method deletes all records matching the parameters
   */
  public void deleteAll() {

      try {
          if (isPrepareNeeded(delAllChildRecords)) {
              delAllChildRecords = connect.getUpdateConnection().prepareStatement(
                   "Delete From  Tbl_RS_SubRecords  "
                   +  " Where RecordId= ? "
                        );
          }

          delAllChildRecords.setInt(1, paramRecordId);

          delAllChildRecords.executeUpdate();
          message = "";
      } catch (Exception ex) {
           setMessage(ex.getMessage(), ex);
      } finally {
    	 freeConnection();
      }
  }




/**
 *   Close the prepared statments
 */
 public void fullClose() {

     super.fullClose();

     closeStatement(delAllChildRecords);

 }

}
