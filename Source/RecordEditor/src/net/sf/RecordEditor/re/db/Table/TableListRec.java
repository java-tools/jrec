package net.sf.RecordEditor.re.db.Table;

import net.sf.RecordEditor.utils.jdbc.AbsRecord;

/**
 *   This class holds the fields extracted from a SQL statement:
 *
 *   <pre>
 *       Select TBlId,
 *              TblName,
 *              TblDescription as Description
 *       From   Tbl_T_Table
 *
 *   </pre>
 * This class also provides both specific field access methods
 * and Generic (based on Field number) access
 *
 * @Author Generated by BuildJava.Rexx by Bruce Martin
 *
 */
public final class TableListRec extends AbsRecord {

  private int TBlId;
  protected int initTBlId ;
  private String tblName;
  private String description;



  public TableListRec () {
      super();

      TBlId = 0;
      tblName = "";
      description = "";

      setKeys();
  }

  public TableListRec (
                    int pTBlId
                  , String pTblName
                  , String pDescription
                  ) {
      super(false);

      TBlId = pTBlId;
      tblName = pTblName;
      description = pDescription;

      setKeys();
  }


  /**
   *  This method copies the key fields to the Init* fields
   */
  public void setKeys() {

      initTBlId = TBlId;
  }

  /**
   *  This method returns clones the current record
   *
   *  @return a duplicate of the current record
   */
  public Object clone() {

      super.clone();

      TableListRec ret = new TableListRec(
                        TBlId
                      , tblName
                      , description
                    );

      ret.setNew(true);
      ret.setUpdateStatus(UPDATED);

      return ret;
  }



  /**
   *  This method returns clones the current record
   */
  public int getFieldCount() {
      return 3;
  }




  /**
   *  This method returns a field (specified by field number)
   *
   *  @param fieldNum the field number (in the record)
   *  @return the request field
   */
  public Object getField(int fieldNum) {

      if (updateStatus == NULL_INT_VALUE) return "";

      switch (fieldNum) {
        case (0) : return Integer.valueOf(TBlId);
        case (1) : return tblName;
        case (2) : return description;
        default  : return "";
      }
  }


  /**
   *  This method sets a field (specified by field number) with a string value
   *
   *  @param fieldNum the field number (in the record)
   *  @param val the value to be assigned to the field
   */
  protected void setFieldWithString(int fieldNum, String val) {

      switch (fieldNum) {
        case (0) : setTBlId(cnvToInt(TBlId, val, "Table Id" ));
        break;
        case (1) : setTblName(val);
        break;
        case (2) : setDescription(val);
        break;
        default  : ;
      }
  }


  /**
   *  This method sets a field (specified by field number) with an object value
   *
   *  @param fieldNum the field number (in the record)
   *  @param val the value to be assigned to the field
   */
  protected void setFieldWithObject(int fieldNum, Object val) {

      switch (fieldNum) {
        case (0) : setTBlId(((Integer) val).intValue());
        break;
        default  : setFieldWithString(fieldNum, (String) val) ;
      }
  }

  /**
   *  This method gets the vaule of TBlId
   */
  public int getTBlId() {
      return TBlId;
  }

  /**
   *  This method sets the vaule of TBlId
   *
   * @param val value to be assigned to TBlId
   */
  public void setTBlId(int val) {

      if ((val != TBlId) || (updateStatus == NULL_INT_VALUE)) {
           TBlId = val;
           updateStatus = UPDATED;
      }
  }

  /**
   *  This method gets the vaule of TblName
   */
  public String getTblName() {
      return tblName;
  }

  /**
   *  This method sets the vaule of TblName
   *
   * @param val value to be assigned to TblName
   */
  public void setTblName(String val) {

      if ((val == null || "".equals(val))
      && (tblName == null || "".equals(tblName))) {
          return;
      }

      if ((val == null) || (! val.equals(tblName)) || (updateStatus == NULL_INT_VALUE)) {
           tblName = val;
           updateStatus = UPDATED;
      }
  }

  /**
   *  This method gets the vaule of Description
   */
  public String getDescription() {
      return description;
  }

  /**
   *  This method sets the vaule of Description
   *
   * @param val value to be assigned to Description
   */
  public void setDescription(String val) {

      if ((val == null || "".equals(val))
      && (description == null || "".equals(description))) {
          return;
      }

      if ((val == null) || (! val.equals(description)) || (updateStatus == NULL_INT_VALUE)) {
           description = val;
           updateStatus = UPDATED;
      }
  }

}
