package net.sf.RecordEditor.layoutEd.Record;

//import java.util.ArrayList;

import net.sf.RecordEditor.utils.jdbc.AbsRecord;


/**
 *   This class holds the fields extracted from a SQL statement:
 *
 *   <pre>
 *       Select RECORDID,
 *              ChildKey,        
 *              FieldNo,         
 *              BooleanOperator, 
 *              Field,           
 *              Operator,        
 *              FieldValue
 *       From   Tbl_RFS_FieldSelection
 *
 *   </pre>
 * This class also provides both specific field access methods
 * and Generic (based on Field number) access
 *
 * @Author Generated by BuildJava.Rexx by Bruce Martin
 * 
 */
public class RecordSelectionRec extends AbsRecord {

	public static final int OPERATOR_OR  = 0;
	public static final int OPERATOR_AND = 1;
	
	private static final String[] OR_LIST  = {"Or", ""};
	private static final String[] AND_LIST = {"And", ""};
	
	protected int init_FieldNo;
	private int recordId, 
	            childKey,
	            fieldNo,
	            booleanOperator;
	private String testField,
	               operator,
	               fieldValue;
	

	public RecordSelectionRec() {
		super();

		recordId=0;
        childKey=0;
        fieldNo=0;
        booleanOperator=0;
		testField="";
        operator="=";
        fieldValue="";

		setKeys();
	}



	public RecordSelectionRec(int recordId, int childKey, int fieldNo,
			int booleanOperator, String field, String operator,
			String fieldValue) {
		super();
		this.recordId = recordId;
		this.childKey = childKey;
		this.fieldNo = fieldNo;
		this.booleanOperator = booleanOperator;
		this.testField = field;
		this.operator = operator;
		this.fieldValue = fieldValue;
	}



	/**
	 * This method copies the key fields to the Init* fields
	 */
	public void setKeys() {

		init_FieldNo = fieldNo;
	}

	/**
	 * This method returns clones the current record
	 * 
	 * @return a duplicate of the current record
	 */
	public Object clone() {

		Object r = super.clone();
		if (r instanceof RecordSelectionRec) {
			return r;
		}

		RecordSelectionRec ret = new RecordSelectionRec(recordId, childKey, fieldNo, booleanOperator, testField, operator, fieldValue);
		ret.setNew(true);

		return ret;
	}

	/**
	 * This method returns clones the current record
	 */
	public int getFieldCount() {
		return 2;
	}

	/**
	 * This method returns a field (specified by field number)
	 * 
	 * @param fieldNum
	 *            the field number (in the record)
	 * @return the request field
	 */
	public Object getField(int fieldNum) {

		if (updateStatus == NULL_INT_VALUE)
			return "";

		switch (fieldNum) {
			// case (0) : return new Integer(Combo_Id);
			case 0: 
				if (fieldNo ==0) {
					return "";
				}
				return OR_LIST[booleanOperator];
			case 1: 
				if (fieldNo ==0) {
					return "";
				}
				return AND_LIST[booleanOperator];
			case 2: return testField;
			case 3: return operator;
			case 4: return fieldValue;
			
			default:
				return "";
		}
	}

	/**
	 * This method sets a field (specified by field number) with a string value
	 * 
	 * @param fieldNum
	 *            the field number (in the record)
	 * @param val
	 *            the value to be assigned to the field
	 */
	protected void setFieldWithString(int fieldNum, String val) {

		switch (fieldNum) {
			case 0: searchArray(val, OR_LIST);	break;
			case 1: searchArray(val, AND_LIST);	break;
			case 2: testField = val;			break;
			case 3: operator = val;				break;
			case 4: fieldValue = val;			break;
			default:
				;
		}
	}
	

	/**
	 * This method sets a field (specified by field number) with an object value
	 * 
	 * @param fieldNum
	 *            the field number (in the record)
	 * @param val
	 *            the value to be assigned to the field
	 */
	protected void setFieldWithObject(int fieldNum, Object val) {

		switch (fieldNum) {
		//case 0: setBooleanOperator(1 - ((Integer) val).intValue());	break;
		//case 1: setBooleanOperator(((Integer) val).intValue());		break;
			
		default:setFieldWithString(fieldNum, (String) val);
		}
	}

	
	private int searchArray(String val, String[] array) {
		if (fieldNo == 0) return 0;
		
		for (int i = 0; i < array.length; i++) {
			if (array[i].equalsIgnoreCase(val)) {
				return i;
			}
		}
		return 0;
	}


	/**
	 * @return the recordId
	 */
	public int getRecordId() {
		return recordId;
	}



	/**
	 * @param recordId the recordId to set
	 */
	public void setRecordId(int recordId) {
		this.recordId = recordId;
	}



	/**
	 * @return the childKey
	 */
	public int getChildKey() {
		return childKey;
	}



	/**
	 * @param childKey the childKey to set
	 */
	public void setChildKey(int childKey) {
		this.childKey = childKey;
	}



	/**
	 * @return the fieldNo
	 */
	public int getFieldNo() {
		return fieldNo;
	}



	/**
	 * @param fieldNo the fieldNo to set
	 */
	public void setFieldNo(int fieldNo) {
		this.fieldNo = fieldNo;
	}



	/**
	 * @return the booleanOperator
	 */
	public int getBooleanOperator() {
		return booleanOperator;
	}



	/**
	 * @param booleanOperator the booleanOperator to set
	 */
	public void setBooleanOperator(int booleanOperator) {
		this.booleanOperator = booleanOperator;
	}



	/**
	 * @return the testField
	 */
	public String getTestField() {
		return testField;
	}



	/**
	 * @param testField the testField to set
	 */
	public void setTestField(String testField) {
		this.testField = testField;
	}



	/**
	 * @return the operator
	 */
	public String getOperator() {
		return operator;
	}



	/**
	 * @param operator the operator to set
	 */
	public void setOperator(String operator) {
		this.operator = operator;
	}



	/**
	 * @return the fieldValue
	 */
	public String getFieldValue() {
		return fieldValue;
	}



	/**
	 * @param fieldValue the fieldValue to set
	 */
	public void setFieldValue(String fieldValue) {
		this.fieldValue = fieldValue;
	}

	

}
