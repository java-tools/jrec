/*
 * Changes
 *
 * # Version 0.61 Bruce Martin 2007/04/14
 *   - Changes due to changes in the RecordFieldsRec,
 *     creation of JRecord etc
 */
package net.sf.RecordEditor.layoutEd.Record;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import net.sf.RecordEditor.utils.jdbc.AbsDB;

/**
 * This class provides DB Access using
 *
 *   <pre>
 *       Select
 *              FieldPos as  Pos,
 *              FieldLength as Len,
 *              FieldName as Name,
 *              Description,
 *              FieldType as Type,
 *              DecimalPos as Decimal,
 *              Cell_Format cellFormat,
 *              Parameter parameter,
 *              DefaultValue as Default,
 *              CobolName,
 *              SubKey
 *       From Tbl_RF_RecordFields
 *       where RecordId = ?
 *       order by FieldPos, FieldLength Desc
 *
 *   </pre>
 * it also provides Insert / Update / Delete routines (depending on the options selected)
 *
 * @Author Generated by BuildJava.Rexx by Bruce Martin
 */

public class RecordFieldsDB  extends AbsDB<RecordFieldsRec> {


  private static final String[] COLUMN_NAMES = {
                   "Position"
                 , "Length"
                 , "FieldName"
                 , "Description"
                 , "FieldType"
                 , "DecimalPos"
                 , "Cell_Format"
                 , "Parameter"
                 , "DefaultValue"
                 , "Cobol Name"
                 , "Field Id"
  };


  private PreparedStatement delAllRecordFields = null;
  private PreparedStatement getMaxKey = null;
  private int paramRecordId;

  public RecordFieldsDB() {

      resetSearch();

      sSQL = " Select  FieldPos, FieldLength, FieldName, Description, FieldType, DecimalPos, Cell_Format, Parameter, DefaultValue, CobolName, SubKey";
      sFrom = "  From Tbl_RF_RecordFields";
      sWhereSQL = "  where RecordId = ?";
      sOrderBy = "  order by FieldPos, FieldLength Desc";
      updateSQL = "Update Tbl_RF_RecordFields  "
                   +  " Set FieldPos= ? "
                   +  "   , FieldLength= ? "
                   +  "   , FieldName= ? "
                   +  "   , Description= ? "
                   +  "   , FieldType= ? "
                   +  "   , DecimalPos= ? "
                   +  "   , Cell_Format= ? "
                   +  "   , Parameter= ? "
                   +  "   , DefaultValue= ? "
                   +  "   , CobolName= ? "
                   +  "   , SubKey= ? "
                   +  " Where RecordId= ? "
                   +  "   and SubKey= ? "
                        ;

      deleteSQL = "Delete From  Tbl_RF_RecordFields  "
                   +  " Where RecordId= ? "
                   +  "   and SubKey= ? "
                        ;

      insertSQL = "Insert Into  Tbl_RF_RecordFields  ("
                      + "    FieldPos"
                      + "  , FieldLength"
                      + "  , FieldName"
                      + "  , Description"
                      + "  , FieldType"
                      + "  , DecimalPos"
                      + "  , Cell_Format"
                      + "  , Parameter"
                      + "  , DefaultValue"
                      + "  , CobolName"
                      + "  , SubKey"
                      + "  , RecordId"
                      + ") Values ("
                      +    "     ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?"
                      + ")";

      super.columnNames = RecordFieldsDB.COLUMN_NAMES;
  }


  /**
   * sets up the DB parameters
   *
   * @param RecordId
   *
   */
  public void setParams( int RecordId) {

      paramRecordId = RecordId;
  }

  /**
   *  This method opens a SQL query
   */
  public void open() {

      prepareCursor();

      try {
          sqlCursor.setInt(1, paramRecordId);

          setStringArgs(1);


          rsCursor  = sqlCursor.executeQuery();
          message = "";
      } catch (Exception ex) {
           setMessage(ex.getMessage(), ex);
      }
  }


//  /**
//   *  This method returns the next record (AbsRecord) from the cursor
//   */
//  public AbsRecord absFetch() {
//      return fetch();
//  }


  /**
   *  This method returns the next record from the cursor
   */
  public RecordFieldsRec fetch() {
  RecordFieldsRec ret = null;

      try {
          if (rsCursor.next()) {
             ret = new RecordFieldsRec(
                        rsCursor.getInt(1)
                      , rsCursor.getInt(2)
                      , rsCursor.getString(3)
                      , rsCursor.getString(4)
                      , rsCursor.getInt(5)
                      , rsCursor.getInt(6)
                      , rsCursor.getInt(7)
                      , rsCursor.getString(8)
                      , rsCursor.getString(9)
                      , rsCursor.getString(10)
                      , rsCursor.getInt(11)
                   );
          }
          message = "";
      } catch (Exception ex) {
           setMessage(ex.getMessage(), ex);
      }

      return ret;
  }


  /**
   *  Get the number of columns returned by the SQL
   */
  public int getColumnCount() {
      return 10;
  }





  /**
   *
   * @param statement statement that needs parameteres set
   * @param value Value to assign to the Statement parameters
   * @param idx parameter index
   *
   * @return updated index
   * @throws SQLException SQL error
   */
  protected int setSQLParams(PreparedStatement statement, RecordFieldsRec value, boolean insert, int idx)
                             throws SQLException {
      RecordFieldsRec val = value;

      statement.setInt(idx++, val.getValue().getPos());
      statement.setInt(idx++, val.getValue().getLen());
      statement.setString(idx++, correctStr(val.getValue().getName()));
      statement.setString(idx++, correctStr(val.getValue().getDescription()));
      statement.setInt(idx++, val.getValue().getType());
      statement.setInt(idx++, val.getValue().getDecimal());
      statement.setInt(idx++, val.getValue().getCellFormat());
      statement.setString(idx++, correctStr(val.getValue().getParameter()));
      statement.setString(idx++, correctStr(val.getValue().getDefault()));
      statement.setString(idx++, correctStr(val.getValue().getCobolName()));
      statement.setInt(idx++, val.getValue().getSubKey());

      if (insert) {
      statement.setInt(idx++, paramRecordId);
      }

      return idx;
  }


  /**
   * Setup the where parameters
   *
   * @param statement SQL statement
   * @param value Value to assign to the Statement parameters
   * @param idx current index
   * @throws SQLException SQL error
   */
  protected void setWhere(PreparedStatement statement, RecordFieldsRec value, int idx)
                          throws SQLException {
 
      statement.setInt(idx++, paramRecordId);
      statement.setInt(idx++, value.initSubKey);
  }


  /**
   *  This method deletes all records matching the parameters
   */
  public void deleteAll() {

      try {
          if (isPrepareNeeded(delAllRecordFields)) {
              delAllRecordFields = connect.getUpdateConnection().prepareStatement(
                   "Delete From  Tbl_RF_RecordFields  "
                   +  " Where RecordId= ? "
                        );
          }

          delAllRecordFields.setInt(1, paramRecordId);

          delAllRecordFields.executeUpdate();
          message = "";
      } catch (Exception ex) {
           setMessage(ex.getMessage(), ex);
      } finally {
     	 freeConnection();
      }
  }



  /**
   * This method gets the next key
   */
  private int getNextKey() {
      final String sql = "Select max(SubKey) From  Tbl_RF_RecordFields "
                   +  " Where RecordId= ? "
                 ;
      int ret = 1;

      try {
          if (isPrepareNeeded(getMaxKey)) {
              getMaxKey = connect.getConnection().prepareStatement(sql);
          }

          getMaxKey.setInt(1, paramRecordId);

          ResultSet rsKey = getMaxKey.executeQuery();
          if (rsKey.next()) {
              ret = rsKey.getInt(1) + 1;
          }
          rsKey.close();
          message = "";
     } catch (Exception ex) {
          setMessage(sql, ex.getMessage(), ex);
     }

    return ret;
  }





  /**
   *  This method inserts one record
   *
   *  @param val value to be inserted
   */
  public void insert(RecordFieldsRec value) {
      //RecordFieldsRec val = (RecordFieldsRec) value;

      int i = 0;
      boolean free = super.isSetDoFree(false);
      
      int key = getNextKey();

      value.getValue().setSubKey(key++);
      while ((i++ < 10) && (! tryToInsert(value))) {
          value.getValue().setSubKey(key++);
      }
      
      super.setDoFree(free);
  }




/**
 *   Close the prepared statments
 */
 public void fullClose() {

     super.fullClose();

     closeStatement(delAllRecordFields);

     closeStatement(getMaxKey);

 }

}
