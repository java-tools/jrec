/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.sf.cb2xml.sablecc.lexer;

import java.io.*;
import java.util.*;
import net.sf.cb2xml.sablecc.node.*;

public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    protected void filter() throws LexerException, IOException
    {
    }

    public Lexer(PushbackReader in)
    {
        this.in = in;

        if(gotoTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Lexer.class.getResourceAsStream("lexer.dat")));

                // read gotoTable
                int length = s.readInt();
                gotoTable = new int[length][][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][][];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        length = s.readInt();
                        gotoTable[i][j] = new int[length][3];
                        for(int k = 0; k < gotoTable[i][j].length; k++)
                        {
                            for(int l = 0; l < 3; l++)
                            {
                                gotoTable[i][j][k][l] = s.readInt();
                            }
                        }
                    }
                }

                // read accept
                length = s.readInt();
                accept = new int[length][];
                for(int i = 0; i < accept.length; i++)
                {
                    length = s.readInt();
                    accept[i] = new int[length];
                    for(int j = 0; j < accept[i].length; j++)
                    {
                        accept[i][j] = s.readInt();
                    }
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
            }
        }
    }

    public Token peek() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        return token;
    }

    public Token next() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        Token result = token;
        token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = pos;
        int start_line = line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        int[][][] gotoTable = this.gotoTable[state.id()];
        int[] accept = this.accept[state.id()];
        text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(cr)
                    {
                        cr = false;
                    }
                    else
                    {
                        line++;
                        pos = 0;
                    }
                    break;
                case 13:
                    line++;
                    pos = 0;
                    cr = true;
                    break;
                default:
                    pos++;
                    cr = false;
                    break;
                };

                text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = text.length();
                    accept_pos = pos;
                    accept_line = line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            Token token = new1(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            Token token = new11(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            Token token = new12(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            Token token = new13(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            Token token = new14(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            Token token = new15(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            Token token = new16(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            Token token = new17(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            Token token = new18(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            Token token = new19(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            Token token = new20(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            Token token = new21(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            Token token = new22(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            Token token = new23(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            Token token = new24(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            Token token = new25(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            Token token = new26(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            Token token = new27(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            Token token = new28(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                            Token token = new29(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            Token token = new30(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                            Token token = new31(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 32:
                        {
                            Token token = new32(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 33:
                        {
                            Token token = new33(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 34:
                        {
                            Token token = new34(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 35:
                        {
                            Token token = new35(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 36:
                        {
                            Token token = new36(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 37:
                        {
                            Token token = new37(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 38:
                        {
                            Token token = new38(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 39:
                        {
                            Token token = new39(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 40:
                        {
                            Token token = new40(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 41:
                        {
                            Token token = new41(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 42:
                        {
                            Token token = new42(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 43:
                        {
                            Token token = new43(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 44:
                        {
                            Token token = new44(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 45:
                        {
                            Token token = new45(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 46:
                        {
                            Token token = new46(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 47:
                        {
                            Token token = new47(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 48:
                        {
                            Token token = new48(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 49:
                        {
                            Token token = new49(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 50:
                        {
                            Token token = new50(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 51:
                        {
                            Token token = new51(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 52:
                        {
                            Token token = new52(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 53:
                        {
                            Token token = new53(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 54:
                        {
                            Token token = new54(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 55:
                        {
                            Token token = new55(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 56:
                        {
                            Token token = new56(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 57:
                        {
                            Token token = new57(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 58:
                        {
                            Token token = new58(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 59:
                        {
                            Token token = new59(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 60:
                        {
                            Token token = new60(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 61:
                        {
                            Token token = new61(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 62:
                        {
                            Token token = new62(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 63:
                        {
                            Token token = new63(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 64:
                        {
                            Token token = new64(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 65:
                        {
                            Token token = new65(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 66:
                        {
                            Token token = new66(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 67:
                        {
                            Token token = new67(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 68:
                        {
                            Token token = new68(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 69:
                        {
                            Token token = new69(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 70:
                        {
                            Token token = new70(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 71:
                        {
                            Token token = new71(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 72:
                        {
                            Token token = new72(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 73:
                        {
                            Token token = new73(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 74:
                        {
                            Token token = new74(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 75:
                        {
                            Token token = new75(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 76:
                        {
                            Token token = new76(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 77:
                        {
                            Token token = new77(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 78:
                        {
                            Token token = new78(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 79:
                        {
                            Token token = new79(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 80:
                        {
                            Token token = new80(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + text);
                    }
                    else
                    {
                        EOF token = new EOF(
                            start_line + 1,
                            start_pos + 1);
                        return token;
                    }
                }
            }
        }
    }

    Token new0(String text, int line, int pos) { return new TWhiteSpace(text, line, pos); }
    Token new1(String text, int line, int pos) { return new TComment(text, line, pos); }
    Token new2(int line, int pos) { return new TDot(line, pos); }
    Token new3(int line, int pos) { return new TComma(line, pos); }
    Token new4(int line, int pos) { return new TSlash(line, pos); }
    Token new5(int line, int pos) { return new TPlus(line, pos); }
    Token new6(int line, int pos) { return new TMinus(line, pos); }
    Token new7(int line, int pos) { return new TStar(line, pos); }
    Token new8(int line, int pos) { return new TDollar(line, pos); }
    Token new9(int line, int pos) { return new TLparen(line, pos); }
    Token new10(int line, int pos) { return new TRparen(line, pos); }
    Token new11(String text, int line, int pos) { return new TNumber88(text, line, pos); }
    Token new12(String text, int line, int pos) { return new TNumberNot88(text, line, pos); }
    Token new13(String text, int line, int pos) { return new TAlphanumericLiteral(text, line, pos); }
    Token new14(String text, int line, int pos) { return new TNumericLiteral(text, line, pos); }
    Token new15(String text, int line, int pos) { return new TDotZee(text, line, pos); }
    Token new16(String text, int line, int pos) { return new TDotMinus(text, line, pos); }
    Token new17(String text, int line, int pos) { return new TDotPlus(text, line, pos); }
    Token new18(String text, int line, int pos) { return new TAll(text, line, pos); }
    Token new19(String text, int line, int pos) { return new TAre(text, line, pos); }
    Token new20(String text, int line, int pos) { return new TAscending(text, line, pos); }
    Token new21(String text, int line, int pos) { return new TBinary(text, line, pos); }
    Token new22(String text, int line, int pos) { return new TBlank(text, line, pos); }
    Token new23(String text, int line, int pos) { return new TBy(text, line, pos); }
    Token new24(String text, int line, int pos) { return new TCharacter(text, line, pos); }
    Token new25(String text, int line, int pos) { return new TComp(text, line, pos); }
    Token new26(String text, int line, int pos) { return new TComp1(text, line, pos); }
    Token new27(String text, int line, int pos) { return new TComp2(text, line, pos); }
    Token new28(String text, int line, int pos) { return new TComp3(text, line, pos); }
    Token new29(String text, int line, int pos) { return new TComp4(text, line, pos); }
    Token new30(String text, int line, int pos) { return new TComp5(text, line, pos); }
    Token new31(String text, int line, int pos) { return new TComp6(text, line, pos); }
    Token new32(String text, int line, int pos) { return new TDate(text, line, pos); }
    Token new33(String text, int line, int pos) { return new TDepending(text, line, pos); }
    Token new34(String text, int line, int pos) { return new TDescending(text, line, pos); }
    Token new35(String text, int line, int pos) { return new TDisplay(text, line, pos); }
    Token new36(String text, int line, int pos) { return new TDisplay1(text, line, pos); }
    Token new37(String text, int line, int pos) { return new TExternal(text, line, pos); }
    Token new38(String text, int line, int pos) { return new TFiller(text, line, pos); }
    Token new39(String text, int line, int pos) { return new TFormat(text, line, pos); }
    Token new40(String text, int line, int pos) { return new TFunctionPointer(text, line, pos); }
    Token new41(String text, int line, int pos) { return new TGlobal(text, line, pos); }
    Token new42(String text, int line, int pos) { return new THighValues(text, line, pos); }
    Token new43(String text, int line, int pos) { return new TIndex(text, line, pos); }
    Token new44(String text, int line, int pos) { return new TIndexed(text, line, pos); }
    Token new45(String text, int line, int pos) { return new TIs(text, line, pos); }
    Token new46(String text, int line, int pos) { return new TJustified(text, line, pos); }
    Token new47(String text, int line, int pos) { return new TKey(text, line, pos); }
    Token new48(String text, int line, int pos) { return new TLeading(text, line, pos); }
    Token new49(String text, int line, int pos) { return new TLeft(text, line, pos); }
    Token new50(String text, int line, int pos) { return new TLowValues(text, line, pos); }
    Token new51(String text, int line, int pos) { return new TNational(text, line, pos); }
    Token new52(String text, int line, int pos) { return new TNative(text, line, pos); }
    Token new53(String text, int line, int pos) { return new TNulls(text, line, pos); }
    Token new54(String text, int line, int pos) { return new TObject(text, line, pos); }
    Token new55(String text, int line, int pos) { return new TOccurs(text, line, pos); }
    Token new56(String text, int line, int pos) { return new TOn(text, line, pos); }
    Token new57(String text, int line, int pos) { return new TPackedDecimal(text, line, pos); }
    Token new58(String text, int line, int pos) { return new TPicture(text, line, pos); }
    Token new59(String text, int line, int pos) { return new TPointer(text, line, pos); }
    Token new60(String text, int line, int pos) { return new TProcedurePointer(text, line, pos); }
    Token new61(String text, int line, int pos) { return new TQuotes(text, line, pos); }
    Token new62(String text, int line, int pos) { return new TRedefines(text, line, pos); }
    Token new63(String text, int line, int pos) { return new TReference(text, line, pos); }
    Token new64(String text, int line, int pos) { return new TRenames(text, line, pos); }
    Token new65(String text, int line, int pos) { return new TRight(text, line, pos); }
    Token new66(String text, int line, int pos) { return new TSeparate(text, line, pos); }
    Token new67(String text, int line, int pos) { return new TSign(text, line, pos); }
    Token new68(String text, int line, int pos) { return new TSpaces(text, line, pos); }
    Token new69(String text, int line, int pos) { return new TSynchronized(text, line, pos); }
    Token new70(String text, int line, int pos) { return new TThrough(text, line, pos); }
    Token new71(String text, int line, int pos) { return new TTimes(text, line, pos); }
    Token new72(String text, int line, int pos) { return new TTo(text, line, pos); }
    Token new73(String text, int line, int pos) { return new TTrailing(text, line, pos); }
    Token new74(String text, int line, int pos) { return new TUsage(text, line, pos); }
    Token new75(String text, int line, int pos) { return new TValue(text, line, pos); }
    Token new76(String text, int line, int pos) { return new TValues(text, line, pos); }
    Token new77(String text, int line, int pos) { return new TWhen(text, line, pos); }
    Token new78(String text, int line, int pos) { return new TZeros(text, line, pos); }
    Token new79(String text, int line, int pos) { return new TDataName(text, line, pos); }
    Token new80(String text, int line, int pos) { return new TUnknown(text, line, pos); }

    private int getChar() throws IOException
    {
        if(eof)
        {
            return -1;
        }

        int result = in.read();

        if(result == -1)
        {
            eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }
    }

    protected void unread(Token token) throws IOException
    {
        String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }

        pos = token.getPos() - 1;
        line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 12, 1}, {13, 13, 4}, {14, 31, 1}, {32, 32, 5}, {33, 33, 1}, {34, 34, 6}, {35, 35, 1}, {36, 36, 7}, {37, 38, 1}, {39, 39, 8}, {40, 40, 9}, {41, 41, 10}, {42, 42, 11}, {43, 43, 12}, {44, 44, 13}, {45, 45, 14}, {46, 46, 15}, {47, 47, 16}, {48, 55, 17}, {56, 56, 18}, {57, 57, 17}, {58, 64, 1}, {65, 65, 19}, {66, 66, 20}, {67, 67, 21}, {68, 68, 22}, {69, 69, 23}, {70, 70, 24}, {71, 71, 25}, {72, 72, 26}, {73, 73, 27}, {74, 74, 28}, {75, 75, 29}, {76, 76, 30}, {77, 77, 31}, {78, 78, 32}, {79, 79, 33}, {80, 80, 34}, {81, 81, 35}, {82, 82, 36}, {83, 83, 37}, {84, 84, 38}, {85, 85, 39}, {86, 86, 40}, {87, 87, 41}, {88, 88, 42}, {89, 89, 31}, {90, 90, 43}, {91, 96, 1}, {97, 97, 44}, {98, 98, 45}, {99, 99, 46}, {100, 100, 47}, {101, 101, 48}, {102, 102, 49}, {103, 103, 50}, {104, 104, 51}, {105, 105, 52}, {106, 106, 53}, {107, 107, 54}, {108, 108, 55}, {109, 109, 56}, {110, 110, 57}, {111, 111, 58}, {112, 112, 59}, {113, 113, 60}, {114, 114, 61}, {115, 115, 62}, {116, 116, 63}, {117, 117, 64}, {118, 118, 65}, {119, 119, 66}, {120, 121, 56}, {122, 122, 67}, {123, 65535, 1}, },
            {},
            {{9, 9, 68}, {10, 10, 69}, {13, 13, 70}, {32, 32, 71}, },
            {{9, 32, -4}, },
            {{9, 9, 68}, {10, 10, 72}, {13, 32, -4}, },
            {{9, 32, -4}, },
            {{0, 33, 73}, {34, 34, 74}, {35, 65535, 73}, },
            {},
            {{0, 38, 75}, {39, 39, 76}, {40, 65535, 75}, },
            {},
            {},
            {{0, 9, 77}, {10, 10, 78}, {11, 12, 77}, {13, 13, 79}, {14, 65535, 77}, },
            {{46, 46, 80}, {48, 57, 81}, },
            {},
            {{45, 45, 82}, {46, 46, 80}, {48, 57, 83}, {65, 90, 84}, {97, 122, 85}, },
            {{45, 45, 86}, {48, 57, 87}, {90, 90, 88}, },
            {},
            {{45, 46, -16}, {48, 57, 89}, {65, 90, 90}, {97, 122, 91}, },
            {{45, 46, -16}, {48, 55, 89}, {56, 56, 92}, {57, 57, 89}, {65, 122, -19}, },
            {{45, 45, 82}, {48, 57, 93}, {65, 75, 84}, {76, 76, 94}, {77, 81, 84}, {82, 82, 95}, {83, 83, 96}, {84, 90, 84}, {97, 107, 85}, {108, 108, 97}, {109, 113, 85}, {114, 114, 98}, {115, 115, 99}, {116, 122, 85}, },
            {{45, 57, -21}, {65, 72, 84}, {73, 73, 100}, {74, 75, 84}, {76, 76, 101}, {77, 88, 84}, {89, 89, 102}, {90, 90, 84}, {97, 104, 85}, {105, 105, 103}, {106, 107, 85}, {108, 108, 104}, {109, 120, 85}, {121, 121, 105}, {122, 122, 85}, },
            {{45, 57, -21}, {65, 71, 84}, {72, 72, 106}, {73, 78, 84}, {79, 79, 107}, {80, 90, 84}, {97, 103, 85}, {104, 104, 108}, {105, 110, 85}, {111, 111, 109}, {112, 122, 85}, },
            {{45, 57, -21}, {65, 65, 110}, {66, 68, 84}, {69, 69, 111}, {70, 72, 84}, {73, 73, 112}, {74, 90, 84}, {97, 97, 113}, {98, 100, 85}, {101, 101, 114}, {102, 104, 85}, {105, 105, 115}, {106, 122, 85}, },
            {{45, 57, -21}, {65, 87, 84}, {88, 88, 116}, {89, 90, 84}, {97, 119, 85}, {120, 120, 117}, {121, 122, 85}, },
            {{45, 72, -22}, {73, 73, 118}, {74, 78, 84}, {79, 79, 119}, {80, 84, 84}, {85, 85, 120}, {86, 90, 84}, {97, 104, 85}, {105, 105, 121}, {106, 110, 85}, {111, 111, 122}, {112, 116, 85}, {117, 117, 123}, {118, 122, 85}, },
            {{45, 75, -21}, {76, 76, 124}, {77, 90, 84}, {97, 107, 85}, {108, 108, 125}, {109, 122, 85}, },
            {{45, 72, -22}, {73, 73, 126}, {74, 90, 84}, {97, 104, 85}, {105, 105, 127}, {106, 122, 85}, },
            {{45, 57, -21}, {65, 77, 84}, {78, 78, 128}, {79, 82, 84}, {83, 83, 129}, {84, 90, 84}, {97, 109, 85}, {110, 110, 130}, {111, 114, 85}, {115, 115, 131}, {116, 122, 85}, },
            {{45, 57, -21}, {65, 84, 84}, {85, 85, 132}, {86, 90, 84}, {97, 116, 85}, {117, 117, 133}, {118, 122, 85}, },
            {{45, 57, -21}, {65, 68, 84}, {69, 69, 134}, {70, 90, 84}, {97, 100, 85}, {101, 101, 135}, {102, 122, 85}, },
            {{45, 68, -31}, {69, 69, 136}, {70, 78, 84}, {79, 79, 137}, {80, 90, 84}, {97, 100, 85}, {101, 101, 138}, {102, 110, 85}, {111, 111, 139}, {112, 122, 85}, },
            {{45, 57, -21}, {65, 122, -16}, },
            {{45, 57, -21}, {65, 65, 140}, {66, 84, 84}, {85, 85, 141}, {86, 90, 84}, {97, 97, 142}, {98, 116, 85}, {117, 117, 143}, {118, 122, 85}, },
            {{45, 57, -21}, {65, 65, 84}, {66, 66, 144}, {67, 67, 145}, {68, 77, 84}, {78, 78, 146}, {79, 90, 84}, {97, 97, 85}, {98, 98, 147}, {99, 99, 148}, {100, 109, 85}, {110, 110, 149}, {111, 122, 85}, },
            {{45, 57, -21}, {65, 65, 150}, {66, 72, 84}, {73, 73, 151}, {74, 78, 84}, {79, 79, 152}, {80, 81, 84}, {82, 82, 153}, {83, 90, 84}, {97, 97, 154}, {98, 104, 85}, {105, 105, 155}, {106, 110, 85}, {111, 111, 156}, {112, 113, 85}, {114, 114, 157}, {115, 122, 85}, },
            {{45, 84, -30}, {85, 85, 158}, {86, 116, -30}, {117, 117, 159}, {118, 122, 85}, },
            {{45, 68, -31}, {69, 69, 160}, {70, 72, 84}, {73, 73, 161}, {74, 90, 84}, {97, 100, 85}, {101, 101, 162}, {102, 104, 85}, {105, 105, 163}, {106, 122, 85}, },
            {{45, 68, -31}, {69, 69, 164}, {70, 72, 84}, {73, 73, 165}, {74, 79, 84}, {80, 80, 166}, {81, 88, 84}, {89, 89, 167}, {90, 90, 84}, {97, 100, 85}, {101, 101, 168}, {102, 104, 85}, {105, 105, 169}, {106, 111, 85}, {112, 112, 170}, {113, 120, 85}, {121, 121, 171}, {122, 122, 85}, },
            {{45, 71, -23}, {72, 72, 172}, {73, 73, 173}, {74, 78, 84}, {79, 79, 174}, {80, 81, 84}, {82, 82, 175}, {83, 90, 84}, {97, 103, 85}, {104, 104, 176}, {105, 105, 177}, {106, 110, 85}, {111, 111, 178}, {112, 113, 85}, {114, 114, 179}, {115, 122, 85}, },
            {{45, 57, -21}, {65, 82, 84}, {83, 83, 180}, {84, 90, 84}, {97, 114, 85}, {115, 115, 181}, {116, 122, 85}, },
            {{45, 57, -21}, {65, 65, 182}, {66, 90, 84}, {97, 97, 183}, {98, 122, 85}, },
            {{45, 71, -23}, {72, 72, 184}, {73, 90, 84}, {97, 103, 85}, {104, 104, 185}, {105, 122, 85}, },
            {{34, 34, 186}, {39, 39, 187}, {45, 122, -33}, },
            {{45, 68, -31}, {69, 69, 188}, {70, 100, -31}, {101, 101, 189}, {102, 122, 85}, },
            {{45, 122, -21}, },
            {{45, 122, -22}, },
            {{45, 122, -23}, },
            {{45, 122, -24}, },
            {{45, 122, -25}, },
            {{45, 122, -26}, },
            {{45, 122, -27}, },
            {{45, 122, -28}, },
            {{45, 122, -29}, },
            {{45, 122, -30}, },
            {{45, 122, -31}, },
            {{45, 122, -32}, },
            {{45, 122, -33}, },
            {{45, 122, -34}, },
            {{45, 122, -35}, },
            {{45, 122, -36}, },
            {{45, 122, -37}, },
            {{45, 122, -38}, },
            {{45, 122, -39}, },
            {{45, 122, -40}, },
            {{45, 122, -41}, },
            {{45, 122, -42}, },
            {{45, 122, -43}, },
            {{45, 122, -45}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -6}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{0, 65535, -8}, },
            {{34, 34, 190}, },
            {{0, 65535, -10}, },
            {{39, 39, 191}, },
            {{0, 65535, -13}, },
            {},
            {{10, 10, 192}, },
            {{48, 57, 87}, },
            {{46, 57, -14}, },
            {{45, 122, -33}, },
            {{45, 122, -16}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 45, 86}, },
            {{48, 57, 87}, {69, 69, 193}, },
            {{90, 90, 88}, },
            {{45, 57, -19}, {65, 122, -16}, },
            {{45, 45, 82}, {48, 57, 194}, {65, 122, -16}, },
            {{45, 122, -92}, },
            {{45, 122, -91}, },
            {{45, 122, -33}, },
            {{45, 75, -21}, {76, 76, 195}, {77, 107, -27}, {108, 108, 196}, {109, 122, 85}, },
            {{45, 68, -31}, {69, 69, 197}, {70, 100, -31}, {101, 101, 198}, {102, 122, 85}, },
            {{45, 57, -21}, {65, 66, 84}, {67, 67, 199}, {68, 90, 84}, {97, 98, 85}, {99, 99, 200}, {100, 122, 85}, },
            {{45, 122, -96}, },
            {{45, 122, -97}, },
            {{45, 122, -98}, },
            {{45, 77, -29}, {78, 78, 201}, {79, 90, 84}, {97, 109, 85}, {110, 110, 202}, {111, 122, 85}, },
            {{45, 57, -21}, {65, 65, 203}, {66, 90, 84}, {97, 97, 204}, {98, 122, 85}, },
            {{45, 122, -33}, },
            {{45, 122, -102}, },
            {{45, 122, -103}, },
            {{45, 122, -33}, },
            {{45, 57, -21}, {65, 65, 205}, {66, 90, 84}, {97, 97, 206}, {98, 122, 85}, },
            {{45, 57, -21}, {65, 76, 84}, {77, 77, 207}, {78, 90, 84}, {97, 108, 85}, {109, 109, 208}, {110, 122, 85}, },
            {{45, 122, -108}, },
            {{45, 122, -109}, },
            {{45, 57, -21}, {65, 83, 84}, {84, 84, 209}, {85, 90, 84}, {97, 115, 85}, {116, 116, 210}, {117, 122, 85}, },
            {{45, 57, -21}, {65, 79, 84}, {80, 80, 211}, {81, 82, 84}, {83, 83, 212}, {84, 90, 84}, {97, 111, 85}, {112, 112, 213}, {113, 114, 85}, {115, 115, 214}, {116, 122, 85}, },
            {{45, 82, -41}, {83, 83, 215}, {84, 114, -41}, {115, 115, 216}, {116, 122, 85}, },
            {{45, 122, -112}, },
            {{45, 122, -113}, },
            {{45, 122, -114}, },
            {{45, 83, -112}, {84, 84, 217}, {85, 115, -112}, {116, 116, 218}, {117, 122, 85}, },
            {{45, 122, -118}, },
            {{45, 75, -21}, {76, 76, 219}, {77, 107, -27}, {108, 108, 220}, {109, 122, 85}, },
            {{45, 57, -21}, {65, 81, 84}, {82, 82, 221}, {83, 90, 84}, {97, 113, 85}, {114, 114, 222}, {115, 122, 85}, },
            {{45, 77, -29}, {78, 78, 223}, {79, 109, -102}, {110, 110, 224}, {111, 122, 85}, },
            {{45, 122, -120}, },
            {{45, 122, -121}, },
            {{45, 122, -122}, },
            {{45, 57, -21}, {65, 78, 84}, {79, 79, 225}, {80, 90, 84}, {97, 110, 85}, {111, 111, 226}, {112, 122, 85}, },
            {{45, 122, -126}, },
            {{45, 57, -21}, {65, 70, 84}, {71, 71, 227}, {72, 90, 84}, {97, 102, 85}, {103, 103, 228}, {104, 122, 85}, },
            {{45, 122, -128}, },
            {{45, 57, -21}, {65, 67, 84}, {68, 68, 229}, {69, 90, 84}, {97, 99, 85}, {100, 100, 230}, {101, 122, 85}, },
            {{45, 122, -33}, },
            {{45, 122, -130}, },
            {{45, 122, -33}, },
            {{45, 82, -41}, {83, 83, 231}, {84, 114, -41}, {115, 115, 232}, {116, 122, 85}, },
            {{45, 122, -134}, },
            {{45, 57, -21}, {65, 88, 84}, {89, 89, 233}, {90, 90, 84}, {97, 120, 85}, {121, 121, 234}, {122, 122, 85}, },
            {{45, 122, -136}, },
            {{45, 57, -21}, {65, 65, 235}, {66, 69, 84}, {70, 70, 236}, {71, 90, 84}, {97, 97, 237}, {98, 101, 85}, {102, 102, 238}, {103, 122, 85}, },
            {{45, 57, -21}, {65, 86, 84}, {87, 87, 239}, {88, 90, 84}, {97, 118, 85}, {119, 119, 240}, {120, 122, 85}, },
            {{45, 122, -138}, },
            {{45, 122, -139}, },
            {{45, 83, -112}, {84, 84, 241}, {85, 115, -112}, {116, 116, 242}, {117, 122, 85}, },
            {{45, 75, -21}, {76, 76, 243}, {77, 107, -27}, {108, 108, 244}, {109, 122, 85}, },
            {{45, 122, -142}, },
            {{45, 122, -143}, },
            {{45, 57, -21}, {65, 73, 84}, {74, 74, 245}, {75, 90, 84}, {97, 105, 85}, {106, 106, 246}, {107, 122, 85}, },
            {{45, 66, -98}, {67, 67, 247}, {68, 98, -98}, {99, 99, 248}, {100, 122, 85}, },
            {{45, 122, -33}, },
            {{45, 122, -146}, },
            {{45, 122, -147}, },
            {{45, 122, -33}, },
            {{45, 66, -98}, {67, 67, 249}, {68, 98, -98}, {99, 99, 250}, {100, 122, 85}, },
            {{45, 66, -98}, {67, 67, 251}, {68, 98, -98}, {99, 99, 252}, {100, 122, 85}, },
            {{45, 72, -22}, {73, 73, 253}, {74, 104, -28}, {105, 105, 254}, {106, 122, 85}, },
            {{45, 78, -126}, {79, 79, 255}, {80, 110, -126}, {111, 111, 256}, {112, 122, 85}, },
            {{45, 122, -152}, },
            {{45, 122, -153}, },
            {{45, 122, -154}, },
            {{45, 122, -155}, },
            {{45, 78, -126}, {79, 79, 257}, {80, 110, -126}, {111, 111, 258}, {112, 122, 85}, },
            {{45, 122, -160}, },
            {{45, 67, -130}, {68, 68, 259}, {69, 69, 84}, {70, 70, 260}, {71, 77, 84}, {78, 78, 261}, {79, 90, 84}, {97, 99, 85}, {100, 100, 262}, {101, 101, 85}, {102, 102, 263}, {103, 109, 85}, {110, 110, 264}, {111, 122, 85}, },
            {{45, 70, -128}, {71, 71, 265}, {72, 102, -128}, {103, 103, 266}, {104, 122, 85}, },
            {{45, 122, -162}, },
            {{45, 122, -163}, },
            {{45, 79, -113}, {80, 80, 267}, {81, 90, 84}, {97, 111, 85}, {112, 112, 268}, {113, 122, 85}, },
            {{45, 70, -128}, {71, 71, 269}, {72, 102, -128}, {103, 103, 270}, {104, 122, 85}, },
            {{45, 57, -21}, {65, 65, 271}, {66, 90, 84}, {97, 97, 272}, {98, 122, 85}, },
            {{45, 77, -29}, {78, 78, 273}, {79, 109, -102}, {110, 110, 274}, {111, 122, 85}, },
            {{45, 122, -166}, },
            {{45, 122, -167}, },
            {{45, 122, -168}, },
            {{45, 122, -169}, },
            {{45, 81, -121}, {82, 82, 275}, {83, 113, -121}, {114, 114, 276}, {115, 122, 85}, },
            {{45, 76, -109}, {77, 77, 277}, {78, 108, -109}, {109, 109, 278}, {110, 122, 85}, },
            {{45, 122, -33}, },
            {{45, 57, -21}, {65, 65, 279}, {66, 90, 84}, {97, 97, 280}, {98, 122, 85}, },
            {{45, 122, -174}, },
            {{45, 122, -175}, },
            {{45, 122, -33}, },
            {{45, 122, -177}, },
            {{45, 57, -21}, {65, 65, 281}, {66, 90, 84}, {97, 97, 282}, {98, 122, 85}, },
            {{45, 122, -182}, },
            {{45, 75, -21}, {76, 76, 283}, {77, 107, -27}, {108, 108, 284}, {109, 122, 85}, },
            {{45, 122, -184}, },
            {{45, 68, -31}, {69, 69, 285}, {70, 100, -31}, {101, 101, 286}, {102, 122, 85}, },
            {{45, 122, -186}, },
            {{48, 57, 287}, {65, 70, 288}, {97, 102, 289}, },
            {{48, 57, 290}, {65, 70, 291}, {97, 102, 292}, },
            {{45, 81, -121}, {82, 82, 293}, {83, 113, -121}, {114, 114, 294}, {115, 122, 85}, },
            {{45, 122, -190}, },
            {{0, 65535, -8}, },
            {{0, 65535, -10}, },
            {},
            {{43, 43, 295}, {45, 45, 296}, {48, 57, 297}, },
            {{45, 57, -21}, {65, 122, -19}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 68, -31}, {69, 69, 298}, {70, 100, -31}, {101, 101, 299}, {102, 122, 85}, },
            {{45, 122, -201}, },
            {{45, 57, -21}, {65, 65, 300}, {66, 90, 84}, {97, 97, 301}, {98, 122, 85}, },
            {{45, 122, -203}, },
            {{45, 77, -29}, {78, 78, 302}, {79, 109, -102}, {110, 110, 303}, {111, 122, 85}, },
            {{45, 122, -205}, },
            {{45, 81, -121}, {82, 82, 304}, {83, 113, -121}, {114, 114, 305}, {115, 122, 85}, },
            {{45, 122, -207}, },
            {{45, 79, -113}, {80, 80, 306}, {81, 111, -166}, {112, 112, 307}, {113, 122, 85}, },
            {{45, 122, -209}, },
            {{45, 68, -31}, {69, 69, 308}, {70, 100, -31}, {101, 101, 309}, {102, 122, 85}, },
            {{45, 122, -211}, },
            {{45, 68, -31}, {69, 69, 310}, {70, 100, -31}, {101, 101, 311}, {102, 122, 85}, },
            {{45, 66, -98}, {67, 67, 312}, {68, 98, -98}, {99, 99, 313}, {100, 122, 85}, },
            {{45, 122, -213}, },
            {{45, 122, -214}, },
            {{45, 79, -113}, {80, 80, 314}, {81, 111, -166}, {112, 112, 315}, {113, 122, 85}, },
            {{45, 122, -217}, },
            {{45, 68, -31}, {69, 69, 316}, {70, 100, -31}, {101, 101, 317}, {102, 122, 85}, },
            {{45, 122, -219}, },
            {{45, 75, -21}, {76, 76, 318}, {77, 107, -27}, {108, 108, 319}, {109, 122, 85}, },
            {{45, 122, -221}, },
            {{45, 76, -109}, {77, 77, 320}, {78, 108, -109}, {109, 109, 321}, {110, 122, 85}, },
            {{45, 122, -223}, },
            {{45, 66, -98}, {67, 67, 322}, {68, 98, -98}, {99, 99, 323}, {100, 122, 85}, },
            {{45, 122, -225}, },
            {{45, 65, -35}, {66, 66, 324}, {67, 90, 84}, {97, 97, 85}, {98, 98, 325}, {99, 122, 85}, },
            {{45, 122, -227}, },
            {{45, 71, -23}, {72, 72, 326}, {73, 103, -43}, {104, 104, 327}, {105, 122, 85}, },
            {{45, 122, -229}, },
            {{45, 68, -31}, {69, 69, 328}, {70, 100, -31}, {101, 101, 329}, {102, 122, 85}, },
            {{45, 122, -231}, },
            {{45, 83, -112}, {84, 84, 330}, {85, 115, -112}, {116, 116, 331}, {117, 122, 85}, },
            {{45, 122, -233}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 67, -130}, {68, 68, 332}, {69, 99, -130}, {100, 100, 333}, {101, 122, 85}, },
            {{45, 83, -112}, {84, 84, 334}, {85, 115, -112}, {116, 116, 335}, {117, 122, 85}, },
            {{45, 122, -237}, },
            {{45, 122, -238}, },
            {{45, 45, 336}, {48, 122, -33}, },
            {{45, 122, -241}, },
            {{45, 72, -22}, {73, 73, 337}, {74, 104, -28}, {105, 105, 338}, {106, 122, 85}, },
            {{45, 122, -243}, },
            {{45, 75, -21}, {76, 76, 339}, {77, 107, -27}, {108, 108, 340}, {109, 122, 85}, },
            {{45, 122, -245}, },
            {{45, 68, -31}, {69, 69, 341}, {70, 100, -31}, {101, 101, 342}, {102, 122, 85}, },
            {{45, 122, -247}, },
            {{45, 84, -30}, {85, 85, 343}, {86, 116, -30}, {117, 117, 344}, {118, 122, 85}, },
            {{45, 122, -249}, },
            {{45, 57, -21}, {65, 74, 84}, {75, 75, 345}, {76, 90, 84}, {97, 106, 85}, {107, 107, 346}, {108, 122, 85}, },
            {{45, 122, -251}, },
            {{45, 83, -112}, {84, 84, 347}, {85, 115, -112}, {116, 116, 348}, {117, 122, 85}, },
            {{45, 122, -253}, },
            {{45, 77, -29}, {78, 78, 349}, {79, 109, -102}, {110, 110, 350}, {111, 122, 85}, },
            {{45, 122, -255}, },
            {{45, 66, -98}, {67, 67, 351}, {68, 98, -98}, {99, 99, 352}, {100, 122, 85}, },
            {{45, 122, -257}, },
            {{45, 83, -112}, {84, 84, 353}, {85, 115, -112}, {116, 116, 354}, {117, 122, 85}, },
            {{45, 122, -259}, },
            {{45, 68, -31}, {69, 69, 355}, {70, 100, -31}, {101, 101, 356}, {102, 122, 85}, },
            {{45, 68, -31}, {69, 69, 357}, {70, 100, -31}, {101, 101, 358}, {102, 122, 85}, },
            {{45, 57, -21}, {65, 65, 359}, {66, 90, 84}, {97, 97, 360}, {98, 122, 85}, },
            {{45, 122, -261}, },
            {{45, 122, -262}, },
            {{45, 122, -263}, },
            {{45, 71, -23}, {72, 72, 361}, {73, 103, -43}, {104, 104, 362}, {105, 122, 85}, },
            {{45, 122, -267}, },
            {{45, 57, -21}, {65, 65, 363}, {66, 90, 84}, {97, 97, 364}, {98, 122, 85}, },
            {{45, 122, -269}, },
            {{45, 77, -29}, {78, 78, 365}, {79, 109, -102}, {110, 110, 366}, {111, 122, 85}, },
            {{45, 122, -271}, },
            {{45, 66, -98}, {67, 67, 367}, {68, 98, -98}, {99, 99, 368}, {100, 122, 85}, },
            {{45, 122, -273}, },
            {{45, 66, -98}, {67, 67, 369}, {68, 98, -98}, {99, 99, 370}, {100, 122, 85}, },
            {{45, 122, -275}, },
            {{45, 78, -126}, {79, 79, 371}, {80, 84, 84}, {85, 85, 372}, {86, 90, 84}, {97, 110, 85}, {111, 111, 373}, {112, 116, 85}, {117, 117, 374}, {118, 122, 85}, },
            {{45, 122, -277}, },
            {{45, 68, -31}, {69, 69, 375}, {70, 100, -31}, {101, 101, 376}, {102, 122, 85}, },
            {{45, 122, -279}, },
            {{45, 72, -22}, {73, 73, 377}, {74, 104, -28}, {105, 105, 378}, {106, 122, 85}, },
            {{45, 122, -281}, },
            {{45, 70, -128}, {71, 71, 379}, {72, 102, -128}, {103, 103, 380}, {104, 122, 85}, },
            {{45, 122, -283}, },
            {{45, 84, -30}, {85, 85, 381}, {86, 116, -30}, {117, 117, 382}, {118, 122, 85}, },
            {{45, 122, -285}, },
            {{45, 77, -29}, {78, 78, 383}, {79, 109, -102}, {110, 110, 384}, {111, 122, 85}, },
            {{45, 122, -287}, },
            {{48, 57, 385}, {65, 70, 386}, {97, 102, 387}, },
            {{48, 102, -289}, },
            {{48, 102, -289}, },
            {{48, 57, 388}, {65, 70, 389}, {97, 102, 390}, },
            {{48, 102, -292}, },
            {{48, 102, -292}, },
            {{45, 78, -126}, {79, 79, 391}, {80, 110, -126}, {111, 111, 392}, {112, 122, 85}, },
            {{45, 122, -295}, },
            {{48, 57, 297}, },
            {{48, 57, 297}, },
            {{48, 57, 297}, },
            {{45, 77, -29}, {78, 78, 393}, {79, 109, -102}, {110, 110, 394}, {111, 122, 85}, },
            {{45, 122, -300}, },
            {{45, 81, -121}, {82, 82, 395}, {83, 113, -121}, {114, 114, 396}, {115, 122, 85}, },
            {{45, 122, -302}, },
            {{45, 74, -251}, {75, 75, 397}, {76, 106, -251}, {107, 107, 398}, {108, 122, 85}, },
            {{45, 122, -304}, },
            {{45, 57, -21}, {65, 65, 399}, {66, 90, 84}, {97, 97, 400}, {98, 122, 85}, },
            {{45, 122, -306}, },
            {{45, 45, 401}, {48, 84, -30}, {85, 85, 402}, {86, 116, -30}, {117, 117, 403}, {118, 122, 85}, },
            {{45, 122, -308}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 77, -29}, {78, 78, 404}, {79, 109, -102}, {110, 110, 405}, {111, 122, 85}, },
            {{45, 122, -312}, },
            {{45, 68, -31}, {69, 69, 406}, {70, 100, -31}, {101, 101, 407}, {102, 122, 85}, },
            {{45, 122, -314}, },
            {{45, 75, -21}, {76, 76, 408}, {77, 107, -27}, {108, 108, 409}, {109, 122, 85}, },
            {{45, 122, -316}, },
            {{45, 81, -121}, {82, 82, 410}, {83, 113, -121}, {114, 114, 411}, {115, 122, 85}, },
            {{45, 122, -318}, },
            {{45, 68, -31}, {69, 69, 412}, {70, 100, -31}, {101, 101, 413}, {102, 122, 85}, },
            {{45, 122, -320}, },
            {{45, 57, -21}, {65, 65, 414}, {66, 90, 84}, {97, 97, 415}, {98, 122, 85}, },
            {{45, 122, -322}, },
            {{45, 83, -112}, {84, 84, 416}, {85, 115, -112}, {116, 116, 417}, {117, 122, 85}, },
            {{45, 122, -324}, },
            {{45, 57, -21}, {65, 65, 418}, {66, 90, 84}, {97, 97, 419}, {98, 122, 85}, },
            {{45, 122, -326}, },
            {{45, 45, 420}, {48, 122, -33}, },
            {{45, 122, -328}, },
            {{45, 87, -25}, {88, 88, 421}, {89, 119, -25}, {120, 120, 422}, {121, 122, 85}, },
            {{45, 122, -330}, },
            {{45, 72, -22}, {73, 73, 423}, {74, 104, -28}, {105, 105, 424}, {106, 122, 85}, },
            {{45, 122, -332}, },
            {{45, 72, -22}, {73, 73, 425}, {74, 104, -28}, {105, 105, 426}, {106, 122, 85}, },
            {{45, 122, -334}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 57, -21}, {65, 85, 84}, {86, 86, 427}, {87, 90, 84}, {97, 117, 85}, {118, 118, 428}, {119, 122, 85}, },
            {{45, 78, -126}, {79, 79, 429}, {80, 85, 84}, {86, 86, 430}, {87, 90, 84}, {97, 110, 85}, {111, 111, 431}, {112, 117, 85}, {118, 118, 432}, {119, 122, 85}, },
            {{45, 122, -339}, },
            {{45, 82, -41}, {83, 83, 433}, {84, 114, -41}, {115, 115, 434}, {116, 122, 85}, },
            {{45, 122, -341}, },
            {{45, 66, -98}, {67, 67, 435}, {68, 98, -98}, {99, 99, 436}, {100, 122, 85}, },
            {{45, 122, -343}, },
            {{45, 81, -121}, {82, 82, 437}, {83, 113, -121}, {114, 114, 438}, {115, 122, 85}, },
            {{45, 122, -345}, },
            {{45, 68, -31}, {69, 69, 439}, {70, 100, -31}, {101, 101, 440}, {102, 122, 85}, },
            {{45, 122, -347}, },
            {{45, 84, -30}, {85, 85, 441}, {86, 116, -30}, {117, 117, 442}, {118, 122, 85}, },
            {{45, 122, -349}, },
            {{45, 83, -112}, {84, 84, 443}, {85, 115, -112}, {116, 116, 444}, {117, 122, 85}, },
            {{45, 122, -351}, },
            {{45, 68, -31}, {69, 69, 445}, {70, 100, -31}, {101, 101, 446}, {102, 122, 85}, },
            {{45, 122, -353}, },
            {{45, 68, -31}, {69, 69, 447}, {70, 100, -31}, {101, 101, 448}, {102, 122, 85}, },
            {{45, 122, -355}, },
            {{45, 57, -21}, {65, 69, 84}, {70, 70, 449}, {71, 90, 84}, {97, 101, 85}, {102, 102, 450}, {103, 122, 85}, },
            {{45, 122, -357}, },
            {{45, 81, -121}, {82, 82, 451}, {83, 113, -121}, {114, 114, 452}, {115, 122, 85}, },
            {{45, 122, -359}, },
            {{45, 76, -109}, {77, 77, 453}, {78, 108, -109}, {109, 109, 454}, {110, 122, 85}, },
            {{45, 122, -361}, },
            {{45, 83, -112}, {84, 84, 455}, {85, 115, -112}, {116, 116, 456}, {117, 122, 85}, },
            {{45, 122, -363}, },
            {{45, 81, -121}, {82, 82, 457}, {83, 113, -121}, {114, 114, 458}, {115, 122, 85}, },
            {{45, 122, -365}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 68, -31}, {69, 69, 459}, {70, 100, -31}, {101, 101, 460}, {102, 122, 85}, },
            {{45, 122, -369}, },
            {{45, 71, -23}, {72, 72, 461}, {73, 103, -43}, {104, 104, 462}, {105, 122, 85}, },
            {{45, 122, -371}, },
            {{45, 84, -30}, {85, 85, 463}, {86, 116, -30}, {117, 117, 464}, {118, 122, 85}, },
            {{45, 122, -33}, },
            {{45, 122, -373}, },
            {{45, 122, -33}, },
            {{45, 82, -41}, {83, 83, 465}, {84, 114, -41}, {115, 115, 466}, {116, 122, 85}, },
            {{45, 122, -377}, },
            {{45, 75, -21}, {76, 76, 467}, {77, 107, -27}, {108, 108, 468}, {109, 122, 85}, },
            {{45, 122, -379}, },
            {{45, 68, -31}, {69, 69, 469}, {70, 100, -31}, {101, 101, 470}, {102, 122, 85}, },
            {{45, 122, -381}, },
            {{45, 68, -31}, {69, 69, 471}, {70, 100, -31}, {101, 101, 472}, {102, 122, 85}, },
            {{45, 122, -383}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{34, 34, 473}, {48, 102, -188}, },
            {{34, 102, -387}, },
            {{34, 102, -387}, },
            {{39, 39, 474}, {48, 102, -189}, },
            {{39, 102, -390}, },
            {{39, 102, -390}, },
            {{45, 68, -31}, {69, 69, 475}, {70, 82, 84}, {83, 83, 476}, {84, 90, 84}, {97, 100, 85}, {101, 101, 477}, {102, 114, 85}, {115, 115, 478}, {116, 122, 85}, },
            {{45, 122, -393}, },
            {{45, 67, -130}, {68, 68, 479}, {69, 99, -130}, {100, 100, 480}, {101, 122, 85}, },
            {{45, 122, -395}, },
            {{45, 88, -136}, {89, 89, 481}, {90, 120, -136}, {121, 121, 482}, {122, 122, 85}, },
            {{45, 122, -397}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 66, -98}, {67, 67, 483}, {68, 98, -98}, {99, 99, 484}, {100, 122, 85}, },
            {{45, 122, -401}, },
            {{45, 45, 82}, {48, 48, 93}, {49, 49, 485}, {50, 50, 486}, {51, 51, 487}, {52, 52, 488}, {53, 53, 489}, {54, 54, 490}, {55, 57, 93}, {65, 122, -16}, },
            {{45, 83, -112}, {84, 84, 491}, {85, 115, -112}, {116, 116, 492}, {117, 122, 85}, },
            {{45, 122, -404}, },
            {{45, 67, -130}, {68, 68, 493}, {69, 99, -130}, {100, 100, 494}, {101, 122, 85}, },
            {{45, 122, -406}, },
            {{45, 77, -29}, {78, 78, 495}, {79, 109, -102}, {110, 110, 496}, {111, 122, 85}, },
            {{45, 122, -408}, },
            {{45, 57, -21}, {65, 65, 497}, {66, 90, 84}, {97, 97, 498}, {98, 122, 85}, },
            {{45, 122, -410}, },
            {{45, 77, -29}, {78, 78, 499}, {79, 109, -102}, {110, 110, 500}, {111, 122, 85}, },
            {{45, 122, -412}, },
            {{45, 81, -121}, {82, 82, 501}, {83, 113, -121}, {114, 114, 502}, {115, 122, 85}, },
            {{45, 122, -414}, },
            {{45, 83, -112}, {84, 84, 503}, {85, 115, -112}, {116, 116, 504}, {117, 122, 85}, },
            {{45, 122, -416}, },
            {{45, 72, -22}, {73, 73, 505}, {74, 104, -28}, {105, 105, 506}, {106, 122, 85}, },
            {{45, 122, -418}, },
            {{45, 75, -21}, {76, 76, 507}, {77, 107, -27}, {108, 108, 508}, {109, 122, 85}, },
            {{45, 122, -420}, },
            {{45, 85, -338}, {86, 86, 509}, {87, 117, -338}, {118, 118, 510}, {119, 122, 85}, },
            {{45, 68, -31}, {69, 69, 511}, {70, 100, -31}, {101, 101, 512}, {102, 122, 85}, },
            {{45, 122, -423}, },
            {{45, 69, -357}, {70, 70, 513}, {71, 101, -357}, {102, 102, 514}, {103, 122, 85}, },
            {{45, 122, -425}, },
            {{45, 77, -29}, {78, 78, 515}, {79, 109, -102}, {110, 110, 516}, {111, 122, 85}, },
            {{45, 122, -427}, },
            {{45, 57, -21}, {65, 65, 517}, {66, 90, 84}, {97, 97, 518}, {98, 122, 85}, },
            {{45, 122, -429}, },
            {{45, 77, -29}, {78, 78, 519}, {79, 109, -102}, {110, 110, 520}, {111, 122, 85}, },
            {{45, 68, -31}, {69, 69, 521}, {70, 100, -31}, {101, 101, 522}, {102, 122, 85}, },
            {{45, 122, -431}, },
            {{45, 122, -432}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 83, -112}, {84, 84, 523}, {85, 115, -112}, {116, 116, 524}, {117, 122, 85}, },
            {{45, 122, -437}, },
            {{45, 82, -41}, {83, 83, 525}, {84, 114, -41}, {115, 115, 526}, {116, 122, 85}, },
            {{45, 122, -439}, },
            {{45, 67, -130}, {68, 68, 527}, {69, 99, -130}, {100, 100, 528}, {101, 122, 85}, },
            {{45, 122, -441}, },
            {{45, 81, -121}, {82, 82, 529}, {83, 113, -121}, {114, 114, 530}, {115, 122, 85}, },
            {{45, 122, -443}, },
            {{45, 68, -31}, {69, 69, 531}, {70, 100, -31}, {101, 101, 532}, {102, 122, 85}, },
            {{45, 122, -445}, },
            {{45, 67, -130}, {68, 68, 533}, {69, 99, -130}, {100, 100, 534}, {101, 122, 85}, },
            {{45, 122, -447}, },
            {{45, 82, -41}, {83, 83, 535}, {84, 114, -41}, {115, 115, 536}, {116, 122, 85}, },
            {{45, 122, -449}, },
            {{45, 72, -22}, {73, 73, 537}, {74, 104, -28}, {105, 105, 538}, {106, 122, 85}, },
            {{45, 122, -451}, },
            {{45, 68, -31}, {69, 69, 539}, {70, 100, -31}, {101, 101, 540}, {102, 122, 85}, },
            {{45, 122, -453}, },
            {{45, 68, -31}, {69, 69, 541}, {70, 100, -31}, {101, 101, 542}, {102, 122, 85}, },
            {{45, 122, -455}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 57, -21}, {65, 65, 543}, {66, 90, 84}, {97, 97, 544}, {98, 122, 85}, },
            {{45, 122, -459}, },
            {{45, 82, -41}, {83, 83, 545}, {84, 114, -41}, {115, 115, 546}, {116, 122, 85}, },
            {{45, 122, -461}, },
            {{45, 81, -121}, {82, 82, 547}, {83, 113, -121}, {114, 114, 548}, {115, 122, 85}, },
            {{45, 122, -463}, },
            {{45, 70, -128}, {71, 71, 549}, {72, 102, -128}, {103, 103, 550}, {104, 122, 85}, },
            {{45, 122, -465}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 72, -22}, {73, 73, 551}, {74, 104, -28}, {105, 105, 552}, {106, 122, 85}, },
            {{45, 122, -469}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 82, -41}, {83, 83, 553}, {84, 114, -41}, {115, 115, 554}, {116, 122, 85}, },
            {{45, 122, -473}, },
            {},
            {},
            {{45, 82, -41}, {83, 83, 555}, {84, 114, -41}, {115, 115, 556}, {116, 122, 85}, },
            {{45, 122, -33}, },
            {{45, 122, -477}, },
            {{45, 122, -33}, },
            {{45, 72, -22}, {73, 73, 557}, {74, 104, -28}, {105, 105, 558}, {106, 122, 85}, },
            {{45, 122, -481}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 83, -112}, {84, 84, 559}, {85, 115, -112}, {116, 116, 560}, {117, 122, 85}, },
            {{45, 122, -485}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 57, -21}, {65, 65, 561}, {66, 90, 84}, {97, 97, 562}, {98, 122, 85}, },
            {{45, 122, -493}, },
            {{45, 72, -22}, {73, 73, 563}, {74, 104, -28}, {105, 105, 564}, {106, 122, 85}, },
            {{45, 122, -495}, },
            {{45, 67, -130}, {68, 68, 565}, {69, 99, -130}, {100, 100, 566}, {101, 122, 85}, },
            {{45, 122, -497}, },
            {{45, 88, -136}, {89, 89, 567}, {90, 120, -136}, {121, 121, 568}, {122, 122, 85}, },
            {{45, 122, -499}, },
            {{45, 57, -21}, {65, 65, 569}, {66, 90, 84}, {97, 97, 570}, {98, 122, 85}, },
            {{45, 122, -501}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 78, -126}, {79, 79, 571}, {80, 110, -126}, {111, 111, 572}, {112, 122, 85}, },
            {{45, 122, -507}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 57, -21}, {65, 65, 573}, {66, 90, 84}, {97, 97, 574}, {98, 122, 85}, },
            {{45, 122, -511}, },
            {{45, 67, -130}, {68, 68, 575}, {69, 99, -130}, {100, 100, 576}, {101, 122, 85}, },
            {{45, 122, -513}, },
            {{45, 72, -22}, {73, 73, 577}, {74, 104, -28}, {105, 105, 578}, {106, 122, 85}, },
            {{45, 122, -515}, },
            {{45, 70, -128}, {71, 71, 579}, {72, 102, -128}, {103, 103, 580}, {104, 122, 85}, },
            {{45, 122, -517}, },
            {{45, 75, -21}, {76, 76, 581}, {77, 107, -27}, {108, 108, 582}, {109, 122, 85}, },
            {{45, 122, -519}, },
            {{45, 57, -21}, {65, 65, 583}, {66, 90, 84}, {97, 97, 584}, {98, 122, 85}, },
            {{45, 122, -521}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 45, 585}, {48, 122, -33}, },
            {{45, 122, -529}, },
            {{45, 68, -31}, {69, 69, 586}, {70, 100, -31}, {101, 101, 587}, {102, 122, 85}, },
            {{45, 122, -531}, },
            {{45, 81, -121}, {82, 82, 588}, {83, 113, -121}, {114, 114, 589}, {115, 122, 85}, },
            {{45, 122, -533}, },
            {{45, 84, -30}, {85, 85, 590}, {86, 116, -30}, {117, 117, 591}, {118, 122, 85}, },
            {{45, 122, -535}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 77, -29}, {78, 78, 592}, {79, 109, -102}, {110, 110, 593}, {111, 122, 85}, },
            {{45, 122, -539}, },
            {{45, 77, -29}, {78, 78, 594}, {79, 109, -102}, {110, 110, 595}, {111, 122, 85}, },
            {{45, 122, -541}, },
            {{45, 82, -41}, {83, 83, 596}, {84, 114, -41}, {115, 115, 597}, {116, 122, 85}, },
            {{45, 122, -543}, },
            {{45, 83, -112}, {84, 84, 598}, {85, 115, -112}, {116, 116, 599}, {117, 122, 85}, },
            {{45, 122, -545}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 78, -126}, {79, 79, 600}, {80, 110, -126}, {111, 111, 601}, {112, 122, 85}, },
            {{45, 122, -549}, },
            {{45, 71, -23}, {72, 72, 602}, {73, 103, -43}, {104, 104, 603}, {105, 122, 85}, },
            {{45, 122, -551}, },
            {{45, 77, -29}, {78, 78, 604}, {79, 109, -102}, {110, 110, 605}, {111, 122, 85}, },
            {{45, 122, -553}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 77, -29}, {78, 78, 606}, {79, 109, -102}, {110, 110, 607}, {111, 122, 85}, },
            {{45, 122, -559}, },
            {{45, 68, -31}, {69, 69, 608}, {70, 100, -31}, {101, 101, 609}, {102, 122, 85}, },
            {{45, 122, -561}, },
            {{45, 83, -112}, {84, 84, 610}, {85, 115, -112}, {116, 116, 611}, {117, 122, 85}, },
            {{45, 122, -563}, },
            {{45, 77, -29}, {78, 78, 612}, {79, 109, -102}, {110, 110, 613}, {111, 122, 85}, },
            {{45, 122, -565}, },
            {{45, 72, -22}, {73, 73, 614}, {74, 104, -28}, {105, 105, 615}, {106, 122, 85}, },
            {{45, 122, -567}, },
            {{45, 45, 616}, {48, 122, -33}, },
            {{45, 122, -569}, },
            {{45, 75, -21}, {76, 76, 617}, {77, 107, -27}, {108, 108, 618}, {109, 122, 85}, },
            {{45, 122, -571}, },
            {{45, 77, -29}, {78, 78, 619}, {79, 109, -102}, {110, 110, 620}, {111, 122, 85}, },
            {{45, 122, -573}, },
            {{45, 75, -21}, {76, 76, 621}, {77, 107, -27}, {108, 108, 622}, {109, 122, 85}, },
            {{45, 122, -575}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 68, -31}, {69, 69, 623}, {70, 100, -31}, {101, 101, 624}, {102, 122, 85}, },
            {{45, 122, -579}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 84, -30}, {85, 85, 625}, {86, 116, -30}, {117, 117, 626}, {118, 122, 85}, },
            {{45, 122, -583}, },
            {{45, 75, -21}, {76, 76, 627}, {77, 107, -27}, {108, 108, 628}, {109, 122, 85}, },
            {{45, 122, -585}, },
            {{45, 67, -130}, {68, 68, 629}, {69, 99, -130}, {100, 100, 630}, {101, 122, 85}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 81, -121}, {82, 82, 631}, {83, 113, -121}, {114, 114, 632}, {115, 122, 85}, },
            {{45, 122, -592}, },
            {{45, 68, -31}, {69, 69, 633}, {70, 100, -31}, {101, 101, 634}, {102, 122, 85}, },
            {{45, 122, -594}, },
            {{45, 66, -98}, {67, 67, 635}, {68, 98, -98}, {99, 99, 636}, {100, 122, 85}, },
            {{45, 122, -596}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 68, -31}, {69, 69, 637}, {70, 100, -31}, {101, 101, 638}, {102, 122, 85}, },
            {{45, 122, -600}, },
            {{45, 77, -29}, {78, 78, 639}, {79, 109, -102}, {110, 110, 640}, {111, 122, 85}, },
            {{45, 122, -602}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 70, -128}, {71, 71, 641}, {72, 102, -128}, {103, 103, 642}, {104, 122, 85}, },
            {{45, 122, -606}, },
            {{45, 70, -128}, {71, 71, 643}, {72, 102, -128}, {103, 103, 644}, {104, 122, 85}, },
            {{45, 122, -608}, },
            {{45, 81, -121}, {82, 82, 645}, {83, 113, -121}, {114, 114, 646}, {115, 122, 85}, },
            {{45, 122, -610}, },
            {{45, 72, -22}, {73, 73, 647}, {74, 104, -28}, {105, 105, 648}, {106, 122, 85}, },
            {{45, 122, -612}, },
            {{45, 70, -128}, {71, 71, 649}, {72, 102, -128}, {103, 103, 650}, {104, 122, 85}, },
            {{45, 122, -614}, },
            {{45, 77, -29}, {78, 78, 651}, {79, 109, -102}, {110, 110, 652}, {111, 122, 85}, },
            {{45, 122, -616}, },
            {{45, 48, -403}, {49, 49, 653}, {50, 57, 93}, {65, 122, -16}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 45, 654}, {48, 122, -33}, },
            {{45, 122, -621}, },
            {{45, 84, -30}, {85, 85, 655}, {86, 116, -30}, {117, 117, 656}, {118, 122, 85}, },
            {{45, 122, -623}, },
            {{45, 67, -130}, {68, 68, 657}, {69, 99, -130}, {100, 100, 658}, {101, 122, 85}, },
            {{45, 122, -625}, },
            {{45, 68, -31}, {69, 69, 659}, {70, 100, -31}, {101, 101, 660}, {102, 122, 85}, },
            {{45, 122, -627}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 68, -31}, {69, 69, 661}, {70, 100, -31}, {101, 101, 662}, {102, 122, 85}, },
            {{45, 122, -631}, },
            {{45, 68, -31}, {69, 69, 663}, {70, 100, -31}, {101, 101, 664}, {102, 122, 85}, },
            {{45, 122, -633}, },
            {{45, 82, -41}, {83, 83, 665}, {84, 114, -41}, {115, 115, 666}, {116, 122, 85}, },
            {{45, 122, -635}, },
            {{45, 68, -31}, {69, 69, 667}, {70, 100, -31}, {101, 101, 668}, {102, 122, 85}, },
            {{45, 122, -637}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 72, -22}, {73, 73, 669}, {74, 104, -28}, {105, 105, 670}, {106, 122, 85}, },
            {{45, 122, -641}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 78, -126}, {79, 79, 671}, {80, 110, -126}, {111, 111, 672}, {112, 122, 85}, },
            {{45, 122, -649}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 70, -128}, {71, 71, 673}, {72, 102, -128}, {103, 103, 674}, {104, 122, 85}, },
            {{45, 122, -653}, },
            {{45, 122, -33}, },
            {{45, 79, -113}, {80, 80, 675}, {81, 111, -166}, {112, 112, 676}, {113, 122, 85}, },
            {{45, 68, -31}, {69, 69, 677}, {70, 100, -31}, {101, 101, 678}, {102, 122, 85}, },
            {{45, 122, -657}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 82, -41}, {83, 83, 679}, {84, 114, -41}, {115, 115, 680}, {116, 122, 85}, },
            {{45, 122, -661}, },
            {{45, 66, -98}, {67, 67, 681}, {68, 98, -98}, {99, 99, 682}, {100, 122, 85}, },
            {{45, 122, -663}, },
            {{45, 45, 683}, {48, 122, -33}, },
            {{45, 122, -665}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 57, -21}, {65, 89, 84}, {90, 90, 684}, {97, 121, 85}, {122, 122, 685}, },
            {{45, 122, -671}, },
            {{45, 77, -29}, {78, 78, 686}, {79, 109, -102}, {110, 110, 687}, {111, 122, 85}, },
            {{45, 122, -673}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 78, -126}, {79, 79, 688}, {80, 110, -126}, {111, 111, 689}, {112, 122, 85}, },
            {{45, 122, -677}, },
            {{45, 82, -41}, {83, 83, 690}, {84, 114, -41}, {115, 115, 691}, {116, 122, 85}, },
            {{45, 122, -679}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 72, -22}, {73, 73, 692}, {74, 104, -28}, {105, 105, 693}, {106, 122, 85}, },
            {{45, 122, -683}, },
            {{45, 79, -113}, {80, 80, 694}, {81, 111, -166}, {112, 112, 695}, {113, 122, 85}, },
            {{45, 68, -31}, {69, 69, 696}, {70, 100, -31}, {101, 101, 697}, {102, 122, 85}, },
            {{45, 122, -686}, },
            {{45, 57, -21}, {65, 65, 698}, {66, 90, 84}, {97, 97, 699}, {98, 122, 85}, },
            {{45, 122, -688}, },
            {{45, 72, -22}, {73, 73, 700}, {74, 104, -28}, {105, 105, 701}, {106, 122, 85}, },
            {{45, 122, -690}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 76, -109}, {77, 77, 702}, {78, 108, -109}, {109, 109, 703}, {110, 122, 85}, },
            {{45, 122, -694}, },
            {{45, 78, -126}, {79, 79, 704}, {80, 110, -126}, {111, 111, 705}, {112, 122, 85}, },
            {{45, 122, -696}, },
            {{45, 67, -130}, {68, 68, 706}, {69, 99, -130}, {100, 100, 707}, {101, 122, 85}, },
            {{45, 122, -698}, },
            {{45, 75, -21}, {76, 76, 708}, {77, 107, -27}, {108, 108, 709}, {109, 122, 85}, },
            {{45, 122, -700}, },
            {{45, 77, -29}, {78, 78, 710}, {79, 109, -102}, {110, 110, 711}, {111, 122, 85}, },
            {{45, 122, -702}, },
            {{45, 57, -21}, {65, 65, 712}, {66, 90, 84}, {97, 97, 713}, {98, 122, 85}, },
            {{45, 122, -704}, },
            {{45, 72, -22}, {73, 73, 714}, {74, 104, -28}, {105, 105, 715}, {106, 122, 85}, },
            {{45, 122, -706}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 45, 716}, {48, 122, -33}, },
            {{45, 122, -710}, },
            {{45, 83, -112}, {84, 84, 717}, {85, 115, -112}, {116, 116, 718}, {117, 122, 85}, },
            {{45, 122, -712}, },
            {{45, 75, -21}, {76, 76, 719}, {77, 107, -27}, {108, 108, 720}, {109, 122, 85}, },
            {{45, 122, -714}, },
            {{45, 77, -29}, {78, 78, 721}, {79, 109, -102}, {110, 110, 722}, {111, 122, 85}, },
            {{45, 122, -716}, },
            {{45, 48, -403}, {49, 49, 723}, {50, 50, 724}, {51, 51, 725}, {52, 52, 726}, {53, 53, 727}, {54, 54, 728}, {55, 122, -403}, },
            {{45, 68, -31}, {69, 69, 729}, {70, 100, -31}, {101, 101, 730}, {102, 122, 85}, },
            {{45, 122, -719}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 83, -112}, {84, 84, 731}, {85, 115, -112}, {116, 116, 732}, {117, 122, 85}, },
            {{45, 122, -723}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 81, -121}, {82, 82, 733}, {83, 113, -121}, {114, 114, 734}, {115, 122, 85}, },
            {{45, 122, -731}, },
            {{45, 68, -31}, {69, 69, 735}, {70, 100, -31}, {101, 101, 736}, {102, 122, 85}, },
            {{45, 122, -733}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 81, -121}, {82, 82, 737}, {83, 113, -121}, {114, 114, 738}, {115, 122, 85}, },
            {{45, 122, -737}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {14, 80, 0, 0, 0, 0, 80, 8, 80, 9, 10, 7, 5, 3, 6, 2, 4, 12, 12, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 0, 0, 0, 0, 0, -1, 13, -1, 13, -1, 1, 1, -1, 14, 79, 14, 79, 79, 16, 14, 15, 12, 79, 79, 11, 79, 79, 79, 79, 79, 79, 79, 79, 79, 23, 79, 79, 23, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 45, 79, 45, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 56, 79, 79, 56, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 72, 79, 79, 79, 72, 79, 79, 79, 79, 79, 79, 79, -1, -1, 79, 79, -1, -1, 1, -1, 79, 18, 18, 19, 19, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 47, 47, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 58, 58, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, -1, -1, -1, -1, -1, -1, 79, 79, -1, -1, 14, 79, 79, 79, 79, 79, 79, 79, 79, 25, 25, 32, 32, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 46, 46, 79, 79, 49, 49, 79, 79, 79, 53, 53, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 67, 67, 79, 79, 69, 69, 79, 70, 79, 70, 79, 79, 79, 79, 79, 79, 79, 79, 77, 77, -1, -1, -1, -1, -1, -1, 78, 78, 79, 79, 79, 79, 22, 22, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 43, 43, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 53, 53, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 61, 61, 79, 79, 79, 79, 79, 79, 65, 65, 79, 79, 68, 68, 79, 79, 79, 79, 71, 71, 79, 79, 74, 74, 75, 75, 13, 13, 79, 78, 79, 78, 79, 79, 21, 21, 79, 79, 26, 27, 28, 29, 30, 31, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 38, 38, 39, 39, 79, 79, 41, 41, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 52, 52, 54, 54, 55, 55, 79, 79, 79, 79, 79, 79, 79, 79, 61, 61, 79, 79, 79, 79, 79, 79, 79, 79, 68, 68, 79, 79, 79, 79, 79, 79, 76, 76, 78, 78, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 35, 35, 79, 79, 79, 79, 79, 79, 44, 44, 79, 79, 48, 48, 79, 79, 79, 79, 79, 58, 58, 59, 59, 79, 79, 79, 79, 79, 79, 64, 64, 79, 79, 79, 79, 70, 70, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 37, 37, 79, 79, 79, 79, 79, 79, 79, 79, 51, 51, 79, 79, 79, 79, 79, 79, 79, 79, 66, 66, 79, 79, 73, 73, 20, 20, 24, 24, 79, 79, 33, 33, 79, 79, 36, 79, 79, 79, 46, 46, 50, 50, 79, 79, 79, 79, 62, 62, 63, 63, 79, 79, 79, 79, 34, 34, 79, 79, 42, 42, 50, 50, 79, 79, 79, 79, 79, 79, 79, 79, 79, 42, 42, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 69, 69, 25, 25, 79, 79, 79, 79, 79, 79, 79, 79, 79, 57, 57, 79, 79, 26, 27, 28, 29, 30, 31, 79, 79, 79, 79, 40, 40, 79, 79, 60, 60, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(int id)
        {
            this.id = id;
        }

        public int id()
        {
            return id;
        }
    }
}
