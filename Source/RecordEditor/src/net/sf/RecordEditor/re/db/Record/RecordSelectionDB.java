package net.sf.RecordEditor.re.db.Record;

import java.sql.PreparedStatement;
import java.sql.SQLException;

import net.sf.RecordEditor.utils.jdbc.AbsDB;



/**
 * This class provides DB Access using
 *
 *   <pre>
 *       Select
 *       Select RECORDID,
 *              ChildKey,        
 *              FieldNo,         
 *              BooleanOperator, 
 *              Field,           
 *              Operator,        
 *              FieldValue
 *       From   Tbl_RFS_FieldSelection
 *       where  RecordId = ?
 *         and  ChildKey = ?
 *
 *   </pre>
 * it also provides Insert / Update / Delete routines (depending on the options selected)
 *
 * @Author Generated by BuildJava.Rexx by Bruce Martin
 */

public class RecordSelectionDB  extends AbsDB<RecordSelectionRec> {

	public static final String DB_NAME = "Tbl_RFS_FieldSelection";
	private static final String[] COLUMN_NAMES = {
		  ""
		, ""
		, "Field"
		, "Operator"
		, "Field Value"
	};


	private PreparedStatement delAllChildRecords = null;

	private int paramRecordId, paramChildKey;

	public RecordSelectionDB() {

		resetSearch();

		sSQL = " Select  RECORDID, ChildKey, FieldNo, BooleanOperator, Field, Operator, FieldValue";
		sFrom = "  from " + DB_NAME;
		sWhereSQL = "  where RecordId = ?  and ChildKey= ?";
		sOrderBy = " Order by FieldNo";
		
		updateSQL = "Update " + DB_NAME
				+  " Set FieldNo= ? "
				+  "   , BooleanOperator= ? "
				+  "   , Field= ? "
				+  "   , Operator= ? "
				+  "   , FieldValue= ? "
				+  " Where RecordId= ? "
				+  "   and ChildKey= ? "
				+  "   and FieldNo= ?"
				;

		deleteSQL = "Delete From  " + DB_NAME
				+  " Where RecordId= ? "
				+  "   and ChildKey= ? "
				+  "   and FieldNo= ?"
				;

		insertSQL = "Insert Into  " + DB_NAME + "  ("
				+ "    FieldNo"
				+ "  , BooleanOperator"
				+ "  , Field"
				+ "  , Operator"
				+ "  , FieldValue"

                      + ") Values ("
                      +    "     ?   , ?   , ?   , ?   , ?, ?   , ?, ?"
                      + ")";

		super.columnNames = RecordSelectionDB.COLUMN_NAMES;
	}


	/**
	 * sets up the DB parameters
	 *
	 * @param RecordId
	 *
	 */
	public void setParams( int recordId, int childKey) {

		paramRecordId = recordId;
		paramChildKey = childKey;
	}

	/**
	 *  This method opens a SQL query
	 */
	public void open() {

		prepareCursor();

		try {
			sqlCursor.setInt(1, paramRecordId);
			sqlCursor.setInt(2, paramChildKey);

			setStringArgs(1);


			rsCursor  = sqlCursor.executeQuery();
			message = "";
		} catch (Exception ex) {
			setMessage(ex.getMessage(), ex);
		}
	}


	//  /**
	//   *  This method returns the next record (AbsRecord) from the cursor
	//   */
	//  public AbsRecord absFetch() {
	//      return fetch();
	//  }


	/**
	 *  This method returns the next record from the cursor
	 */
	public RecordSelectionRec fetch() {
		RecordSelectionRec ret = null;

		try {
			if (rsCursor.next()) {
				ret = new RecordSelectionRec(
						  rsCursor.getInt(1)
						, rsCursor.getInt(2)
						, rsCursor.getInt(3)
						, rsCursor.getInt(4)
						, rsCursor.getString(5)
						, rsCursor.getString(6)
						, rsCursor.getString(7)
						);
			}
			message = "";
		} catch (Exception ex) {
			setMessage(ex.getMessage(), ex);
		}

		return ret;
	}


	/**
	 *  Get the number of columns returned by the SQL
	 */
	public int getColumnCount() {
		return 5;
	}





	/**
	 *
	 * @param statement statement that needs parameteres set
	 * @param value Value to assign to the Statement parameters
	 * @param idx parameter index
	 *
	 * @return updated index
	 * @throws SQLException SQL error
	 */
	protected int setSQLParams(PreparedStatement statement, RecordSelectionRec value, boolean insert, int idx)
			throws SQLException {
		RecordSelectionRec val = value;

		statement.setInt(idx++, val.getFieldNo());
		statement.setInt(idx++, val.getBooleanOperator());
		statement.setString(idx++, correctStr(val.getTestField()));
		statement.setString(idx++, correctStr(val.getOperator()));
		statement.setString(idx++, correctStr(val.getFieldValue()));
		

		if (insert) {
			statement.setInt(idx++, paramRecordId);
		}

		return idx;
	}


	/**
	 * Setup the where parameters
	 *
	 * @param statement SQL statement
	 * @param value Value to assign to the Statement parameters
	 * @param idx current index
	 * @throws SQLException SQL error
	 */
	protected void setWhere(PreparedStatement statement, RecordSelectionRec value, int idx)
			throws SQLException {
		//ChildRecordsRec val =  value;

		statement.setInt(idx++, paramRecordId);
		statement.setInt(idx++, paramChildKey);
		statement.setInt(idx++, value.init_FieldNo);
	}


	/**
	 *  This method deletes all records matching the parameters
	 */
	public void deleteAll() {

		try {
			if (isPrepareNeeded(delAllChildRecords)) {
				delAllChildRecords = connect.getUpdateConnection().prepareStatement(
						"Delete From  " + DB_NAME
						+  " Where RecordId= ? "
						+  "   and ChildKey = ? "
						);
			}

			delAllChildRecords.setInt(1, paramRecordId);

			delAllChildRecords.executeUpdate();
			message = "";
		} catch (Exception ex) {
			setMessage(ex.getMessage(), ex);
		} finally {
			freeConnection();
		}
	}




	/* (non-Javadoc)
	 * @see net.sf.RecordEditor.utils.jdbc.AbsDB#insert(net.sf.RecordEditor.utils.jdbc.AbsRecord)
	 */
	@Override
	public void insert(RecordSelectionRec value) {
		int i = 0;
		boolean free = super.isSetDoFree(false);

		int key = getNextKey();

		value.setChildKey(key++);
		while ((i++ < 10) && (! tryToInsert(value))) {
			value.setChildKey(key++);
		}

		super.setDoFree(free);
	}

	/**
	 * This method gets the next key
	 */
	private int getNextKey() {
		final String sql = "Select max(ChildKey) From  " + DB_NAME
				+  " Where RecordId= ?  and childKey = ?"
				;
		return getNextIntSubKey(sql, paramRecordId, paramChildKey);
	}
	
	
	/**
	 *   Close the prepared statments
	 */
	public void fullClose() {

		super.fullClose();

		closeStatement(delAllChildRecords);

	}

}
